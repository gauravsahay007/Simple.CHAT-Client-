[{"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\index.js":"1","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\App.js":"3","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Router.js":"4","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Helper\\APIcalls.js":"5","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\backend.js":"6","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Signup.js":"7","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\login.js":"8","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Login.js":"9","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Mychats.js":"10","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\main\\chatProvider.js":"11","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\configuration\\logic.js":"12","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Helper.js":"13","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Avatar\\UserListItem.js":"14","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Avatar\\UserBadgeItem.js":"15","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\test.js":"16","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Modals\\profile.js":"17","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Modals\\CreateGroupChat.js":"18","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Modals\\UpdateGroupChat.js":"19","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Modals\\SideBar.js":"20","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\chatloading.js":"21","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Pages\\ChatPage.js":"22","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\ChatBox.js":"23","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\SingleChat.js":"24","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\ScrollableChats.js":"25","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Helper.js":"26","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\cloudinary.js":"27","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Pages\\HomePage.js":"28"},{"size":535,"mtime":1685956485937,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1685956486302,"results":"31","hashOfConfig":"30"},{"size":267,"mtime":1686552481692,"results":"32","hashOfConfig":"30"},{"size":1095,"mtime":1687322432749,"results":"33","hashOfConfig":"30"},{"size":1294,"mtime":1686113568497,"results":"34","hashOfConfig":"30"},{"size":96,"mtime":1687325974660,"results":"35","hashOfConfig":"30"},{"size":5378,"mtime":1687279704499,"results":"36","hashOfConfig":"30"},{"size":4470,"mtime":1685998422633,"results":"37","hashOfConfig":"30"},{"size":4796,"mtime":1687322432742,"results":"38","hashOfConfig":"30"},{"size":4245,"mtime":1687287692305,"results":"39","hashOfConfig":"30"},{"size":2241,"mtime":1687322432750,"results":"40","hashOfConfig":"30"},{"size":2156,"mtime":1687204011246,"results":"41","hashOfConfig":"30"},{"size":4855,"mtime":1687322432744,"results":"42","hashOfConfig":"30"},{"size":702,"mtime":1687265297728,"results":"43","hashOfConfig":"30"},{"size":511,"mtime":1687272397014,"results":"44","hashOfConfig":"30"},{"size":300,"mtime":1686218125546,"results":"45","hashOfConfig":"30"},{"size":2717,"mtime":1687273658082,"results":"46","hashOfConfig":"30"},{"size":6365,"mtime":1687322432745,"results":"47","hashOfConfig":"30"},{"size":8659,"mtime":1687273125903,"results":"48","hashOfConfig":"30"},{"size":6049,"mtime":1687322432747,"results":"49","hashOfConfig":"30"},{"size":543,"mtime":1686217428264,"results":"50","hashOfConfig":"30"},{"size":948,"mtime":1687269751681,"results":"51","hashOfConfig":"30"},{"size":911,"mtime":1687270824371,"results":"52","hashOfConfig":"30"},{"size":9585,"mtime":1687279194293,"results":"53","hashOfConfig":"30"},{"size":1950,"mtime":1687279183485,"results":"54","hashOfConfig":"30"},{"size":1405,"mtime":1686310654069,"results":"55","hashOfConfig":"30"},{"size":1910,"mtime":1687279704503,"results":"56","hashOfConfig":"30"},{"size":1229,"mtime":1687322432748,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},"1a61mm9",{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"61"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"76","usedDeprecatedRules":"61"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"61"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"61"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"61"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"61"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"61"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"61"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"61"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"61"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"61"},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"61"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\index.js",[],[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\App.js",["162","163"],[],"import React from 'react'\nimport {  Box } from '@mui/material'\nimport Routers from \"./Router\"\nimport io from \"socket.io-client\"\n\nexport default function App() {\n  \n  return (\n    <React.StrictMode>\n      \n       <Routers/> \n    \n\n      </React.StrictMode>\n    \n  )\n}\n","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Router.js",["164"],[],"import React from 'react'\r\nimport { Route,Routes,BrowserRouter } from 'react-router-dom'\r\nimport ChatProvider from './main/chatProvider'\r\n\r\n// -------------------------------------------\r\nimport Signup from './Components/Auth/Signup';\r\nimport Login from \"./Components/Auth/Login\" \r\nimport Mychats from './Components/Mychats'\r\nimport HomePage from './Pages/HomePage';\r\nimport Test from './test'\r\nimport ChatPage from './Pages/ChatPage'\r\nimport Cloudinary from './cloudinary'\r\n// --------------------------------------------\r\nexport default function Router() {\r\n  \r\n  return (\r\n   \r\n       <BrowserRouter>\r\n        <ChatProvider>\r\n    <Routes>\r\n        <Route path='/signup' exact element={<Signup/>} />\r\n        <Route path='/' exact element={<HomePage/>} />\r\n        <Route path='/login' exact element={<Login/>} />\r\n        <Route path='/chats' exact element={<ChatPage/>} />\r\n        <Route path='/test' exact element={<Test/>}/>\r\n        <Route path='/cloudinary' exact element={<Cloudinary/>}/>\r\n        \r\n        \r\n    </Routes>\r\n    </ChatProvider>\r\n    </BrowserRouter>\r\n  \r\n   \r\n  )\r\n}\r\n","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Helper\\APIcalls.js",["165"],[],"import {API} from \"../../../backend\"\r\n\r\n\r\nexport const login = (user) => {\r\n    \r\n    return fetch(`${API}/login`,{\r\n        method:\"POST\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(user)\r\n    })\r\n    .then(resp => {\r\n        return resp.json();\r\n    })\r\n    .catch(err => {return err })\r\n}\r\n\r\nexport const signup = (user) => {\r\n    return fetch(`${API}/signup`,{\r\n        method:\"POST\",\r\n        headers:{\r\n            Accept: \"application/json\",\r\n            \"Content-Type\":\"application/json\"\r\n        },\r\n        body: JSON.stringify(user)\r\n\r\n    }).then((resp,err)=>{\r\n        if(err){\r\n            return ;\r\n        }\r\n        else return resp.json();\r\n    }).\r\n    catch(err=>{\r\n        console.log(err);\r\n        return\r\n    })\r\n}\r\n\r\nexport const authenticate = (data, next) =>{\r\n    if(typeof window !== \"undefined\"){\r\n        localStorage.setItem(\"jwt\",JSON.stringify(data))\r\n\r\n        next();\r\n    }\r\n}\r\n\r\nexport const isAuthenticated = () => {\r\n    if(typeof window == \"undefined\"){\r\n        return false\r\n    }\r\n    if(localStorage.getItem(\"jwt\")){\r\n        \r\n        return JSON.parse(localStorage.getItem(\"jwt\"));\r\n        \r\n    }\r\n    else{\r\n        return false    }\r\n}","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\backend.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Signup.js",["166","167","168","169","170","171"],[],"import React from 'react'\r\nimport {useState} from \"react\"\r\nimport { useNavigate, Navigate } from 'react-router-dom';\r\nimport {signup} from \"./Helper/APIcalls\"\r\n\r\n// --------------------------------------------------------\r\n// Material UI\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport TextField from '@mui/material/TextField';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Link from '@mui/material/Link';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport { Snackbar,Alert } from '@mui/material';\r\n\r\n// --------------------------------------------------------\r\nexport default function Signup() {\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [name , setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [image,setImage]=useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [success, setSuccess] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    const defaultTheme = createTheme();    \r\n      const handleChange = name => event => {\r\n        if(name===\"name\"){\r\n            setName(event.target.value);\r\n        }\r\n        else if(name===\"email\"){\r\n            setEmail(event.target.value);\r\n        }\r\n        else if(name===\"password\"){\r\n            setPassword(event.target.value)\r\n        }\r\n        else{\r\n            setImage(event.target.value)\r\n        }\r\n      }\r\n\r\n      const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(!name || !email || !password){\r\n          setShow(true);\r\n        }\r\n        else{\r\n          signup({name,email,password}).then(data => {\r\n            setSuccess(true);\r\n            setName(\"\");\r\n            setEmail(\"\");\r\n            setPassword(\"\");\r\n            console.log(data);\r\n        }\r\n        )\r\n        }\r\n      \r\n      };\r\n\r\n      const handleClose = event => {\r\n        setShow(false);\r\n        setSuccess(false);\r\n      }\r\n    \r\n \r\n\r\n\r\n  return (\r\n    <div >\r\n      <Snackbar open={show} autoHideDuration={4000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\" variant='filled' sx={{ width: '100%' }}>\r\n          Please fill all the fields!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar open={success} autoHideDuration={4000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\" variant='filled' sx={{ width: '100%' }}>\r\n          Signed Up Successfully!!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Avatar sx={{ m: 1, bgcolor: '#32465A' }}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign up\r\n          </Typography>\r\n          <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  value={name}\r\n                  name=\"Name\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"Name\"\r\n                  label=\"Name\"\r\n                  autoFocus\r\n                  onChange={handleChange(\"name\")}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  value={email}\r\n                  onChange={handleChange(\"email\")}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\" \r\n                  value={password}\r\n                  onChange={handleChange(\"password\")}\r\n                  autoComplete=\"new-password\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n             \r\n              sx={[{ mt: 3, mb: 2, bgcolor:\"#32465A\" },{\r\n                '&:hover':{\r\n                    bgcolor: \"#32465A\"\r\n                }\r\n              }]}\r\n            onClick={handleSubmit}\r\n            >\r\n              Sign Up\r\n            </Button>\r\n            <Grid container justifyContent=\"flex-end\">\r\n              <Grid item>\r\n                <Link href=\"http://localhost:3000/login\" variant=\"body2\">\r\n                  Already have an account? Sign in\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n    \r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\login.js",["172","173","174","175","176","177","178","179","180","181","182","183","184"],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Login.js",["185","186","187","188","189","190","191"],[],"import React from 'react'\r\nimport {useState} from \"react\"\r\nimport { useNavigate, Navigate } from 'react-router-dom';\r\nimport {login} from \"./Helper/APIcalls\"\r\nimport { authenticate } from './Helper/APIcalls';\r\n// --------------------------------------------------------\r\n// Material UI\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport TextField from '@mui/material/TextField';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Link from '@mui/material/Link';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport { Snackbar,Alert } from '@mui/material';\r\nimport { ChatState } from '../../main/chatProvider';\r\n\r\n// --------------------------------------------------------\r\nexport default function Login() {\r\n    const [show, setShow] = useState(false);\r\n    const { setUser } = ChatState();\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [success, setSuccess] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    const defaultTheme = createTheme();    \r\n      const handleChange = name => event => {\r\n        \r\n        if(name===\"email\"){\r\n            setEmail(event.target.value);\r\n        }\r\n        else {\r\n            setPassword(event.target.value)\r\n        }\r\n      }\r\n\r\n      const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(!email || !password){\r\n          setShow(true);\r\n          \r\n        }\r\n        else{  \r\n            login({email,password}).then(data => {\r\n              \r\n              \r\n              const user =   data;\r\n              // console.log(user);\r\n\r\n              if(user.token){\r\n                localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n                setUser(data);\r\n                setSuccess(true);\r\n                navigate(\"/chats\");\r\n              }\r\n              \r\n            \r\n              \r\n  \r\n            }\r\n            )\r\n        }\r\n       \r\n      };\r\n\r\n      const handleClose = event => {\r\n        setShow(false);\r\n        setSuccess(false);\r\n      }\r\n    \r\n \r\n\r\n\r\n  return (\r\n    <div >\r\n      <Snackbar open={show} autoHideDuration={4000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\" variant='filled' sx={{ width: '100%' }}>\r\n          Please fill all the fields!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar open={success} autoHideDuration={4000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\" variant='filled' sx={{ width: '100%' }}>\r\n          Logined Successfully!!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Avatar sx={{ m: 1, bgcolor: '#32465A' }}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n           Sign In\r\n          </Typography>\r\n          <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  value={email}\r\n                  onChange={handleChange(\"email\")}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\" \r\n                  value={password}\r\n                  onChange={handleChange(\"password\")}\r\n                  autoComplete=\"new-password\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n           \r\n         <Button fullWidth variant=\"filled\" sx={[{color:\"white\", bgcolor:\"#32465A\",mt:\"10px\",mr:\"5px\"},{\r\n          \"&:hover\":{\r\n            bgcolor:\"#32465F\",\r\n            color:\"white\",\r\n            \r\n          }\r\n        \r\n        }]} onClick={handleSubmit}>\r\n              Login\r\n            </Button>\r\n\r\n          </Box>\r\n        </Box>\r\n    \r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Mychats.js",["192","193","194","195","196","197"],[],"import React from 'react'\r\nimport { useState,useEffect } from 'react'\r\nimport CreateGroupChat from './Modals/CreateGroupChat'\r\nimport {Avatar} from '@mui/material'\r\nimport { ChatState } from '../main/chatProvider'\r\nimport { FetchChats } from './Helper';\r\nimport { getOtherUser } from '../configuration/logic';\r\nimport ChatLoading from './chatloading'\r\n// --------------------------------------------\r\n// MUI\r\nimport { Box , Stack, Typography} from '@mui/material'\r\n\r\n// --------------------------------------------\r\n\r\nexport default function Mychats({fetchAgain,setFetchAgain}) {\r\n  const {\r\n    selectedChat,\r\n    setSelectedChat,\r\n    user,\r\n    chats,\r\n    setChats,\r\n    notification,\r\n    removeNotification,\r\n  } = ChatState();\r\n\r\n  const [loggedUser, setLoggedUser] = useState(user);\r\nconst [loading, setLoading] = useState(false);\r\n const fetchChats = () =>{\r\n  try{\r\n  FetchChats(user).then((response)=>{\r\n    // console.log(response);\r\n    setChats(response);\r\n    \r\n  })\r\n}catch(err){\r\n  console.log(err);\r\n }}\r\n   \r\n \r\n\r\n  useEffect(()=>{\r\n  \r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")))\r\n    fetchChats();\r\n    // console.log(\"fetched again MyChats.js\");\r\n  },[fetchAgain]);\r\n\r\n  const selectChat = (chat) =>{\r\n    \r\n    setSelectedChat(chat);\r\n    removeNotification(user,chat._id);\r\n    setFetchAgain(!fetchAgain);\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        sx={{\r\n          display: { md: selectedChat ? 'flex' : 'flex', xs: selectedChat ? 'none' : 'flex' },\r\n          flexDirection: 'column',\r\n          alignItems: 'center',\r\n          bgcolor: 'white',\r\n          height: '94vh',\r\n          mt: '10px',\r\n          m: { xs: 'auto', md: '0px', lg: '0px' },\r\n          borderRadius: '4px',\r\n          mr: { xs: 'auto', md: 'auto', lg: 'auto' },\r\n        }}\r\n      >\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>\r\n          <Typography sx={{ color: '#32465A', mt: '5px', ml: '10px' }}>MY CHATS</Typography>\r\n          <CreateGroupChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        </Box>\r\n\r\n        <Box\r\n          sx={{\r\n            bgcolor: '#F0EEED',\r\n            p: '10px',\r\n            borderRadius: '4px',\r\n            width: '100vw',\r\n            mt: '10px',\r\n            height: '90%',\r\n            mr: { xs: '0px', md: 'auto' },\r\n            ml: { xs: '0px', md: '5px', lg: '5px' },\r\n            width: { xs: '90vw', md: '30vw', lg: '30vw' },\r\n            overflow: 'auto',\r\n          }}\r\n        >\r\n          {chats ? (\r\n            <Stack sx={{ width: '100%', cursor: 'pointer' }}>\r\n              {chats.map((chat) => (\r\n                <Box\r\n                  onClick={() => selectChat(chat)}\r\n                  sx={{\r\n                    bgcolor: '#2C3E50',\r\n                    color: 'white',\r\n                    mb: '2px',\r\n                    width: '100%',\r\n                    height: '3rem',\r\n                    borderRadius: '4px',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    padding: '0 10px',\r\n                  }}\r\n                  key={chat._id}\r\n                >\r\n                  <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                    <Avatar sx={{ width: '30px', height: '30px', mt: '3px', ml: '3px' }} cursor=\"pointer\" src={user.pic} />\r\n                    <Typography sx={{ ml: '5px' }}>\r\n                      {!chat.isGroupChat ? chat.chatName : chat.chatName}\r\n                    </Typography>\r\n                  </Box>\r\n\r\n                  {chat.latestMessage && (\r\n                    <Typography sx={{ color: 'white', ml: 'auto' }}>\r\n                      {!chat.isGroupChat\r\n                        ? chat.latestMessage.content\r\n                        : chat.latestMessage.sender._id === loggedUser.user._id\r\n                        ? `You: ${chat.latestMessage.content}`\r\n                        : `${chat.latestMessage.sender.name}: ${chat.latestMessage.content}`}\r\n                    </Typography>\r\n                  )}\r\n                </Box>\r\n              ))}\r\n            </Stack>\r\n          ) : (\r\n            <ChatLoading />\r\n          )}\r\n        </Box>\r\n      </Box>\r\n    </>\r\n  );\r\n}","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\main\\chatProvider.js",["198","199","200","201","202"],[],"import { createContext, useContext, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\nimport { API } from \"../backend\";\r\nimport { getOtherUsers } from '../configuration/logic';\r\nimport { GetNotification, RemoveNotification } from '../Helper';\r\nimport { SendNotification } from '../Components/Helper';\r\n\r\nconst ChatContext=createContext(\"\");\r\n\r\nconst ChatProvider=({children})=>{\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const [chats,setChats]=useState();\r\n    const [error,setError]=useState();\r\n    const [user,setUser]=useState(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    const [selectedChat,setSelectedChat]=useState();\r\n    const [notification,setNotification]=useState([]);\r\n\r\n\r\n    const getNotification=(userId)=>{\r\n        try{\r\n            GetNotification(user).then(data=>{\r\n                var notificationArray = [] ;\r\n                data.notifications.forEach((element)=>{\r\n                    notificationArray.push(element.message);\r\n                })\r\n                setNotification(notificationArray);\r\n            })\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n        }\r\n       };\r\n   const removeNotification=(user,chatId)=>{\r\n    // console.log(user);\r\n    try{\r\n        RemoveNotification(user,chatId).then(data=>{\r\n            var notificationArray = [];\r\n            data.notifications.forEach((element)=>{\r\n                notificationArray.push(element.message);\r\n            })\r\n            setNotification(notificationArray)\r\n        })      \r\n    }\r\n    catch(err){\r\n        console.log(err);\r\n    }\r\n   };\r\n   \r\n   const sendNotification=(response)=>{\r\n     try{\r\n      SendNotification(user, response)\r\n     }\r\n     catch(err){\r\n        console.log(err);\r\n     }\r\n   }\r\n\r\n   \r\n   \r\n   return (\r\n    <ChatContext.Provider\r\n    value={{\r\n        user,setUser,\r\n        selectedChat,setSelectedChat,\r\n        chats,setChats,\r\n        error,setError,\r\n        notification,setNotification,\r\n        removeNotification,\r\n        sendNotification,\r\n    }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n   );\r\n};\r\nexport const ChatState=()=>{\r\n    return useContext(ChatContext);\r\n}\r\nexport default ChatProvider","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\configuration\\logic.js",["203"],[],"import { GetUser } from \"../Components/Helper\";\r\n\r\nexport const getOtherUser=(loggedUser,users)=>{\r\n    // console.log(users);\r\n    if(!users || users.length < 1){\r\n     return ;\r\n    }\r\n //    if it is one to one chat then other user will be either first in the array or the second one\r\n    if(users[0]._id==loggedUser.user._id){\r\n        // console.log(users[1]._id);\r\n        \r\n        return GetUser(users[1]._id,loggedUser) ;\r\n    }\r\n    else {\r\n        // console.log(users[0]._id);\r\n      \r\n        return GetUser(users[0]._id,loggedUser);\r\n    }\r\n } \r\n\r\n export const getOtherUsers = (loggedUser, users) => {\r\n    var arr = [];\r\n    users.forEach((user)=> {\r\n        if(user._id  !== loggedUser._id){\r\n            arr.push(user)\r\n        }\r\n    });\r\n    return arr;\r\n }\r\n\r\n//   this function is used to determine if the current message should be displayed with a different styling or formatting compared to the next message, based on the sender's identity\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n    return (i < messages.length - 1 && messages[i + 1].sender._id !== m.sender._id);\r\n}\r\n\r\n// this function can be used to determine if the current message is the last message in the conversation, and if it is sent by a different user than the userId, indicating that it may require a different styling\r\n export const isLastMessage = (messages, i, userId) => {\r\n    return (\r\n        i === messages.length -1 &&\r\n         messages[messages.length - 1].sender._id !== userId && messages[messages.length - 1].sender._id\r\n    )\r\n }\r\n\r\nexport const isSameSenderMargin = (messages, m, i, userId) => {\r\n    if(\r\n        i<messages.length-1 && messages[i+1].sender._id === m.sender._id && messages[i].sender._id !== userId\r\n    ){\r\n        return 1;\r\n    }\r\n\r\n    else if(\r\n        (i<messages.length-1 && messages[i+1].sender._id !== m.sender._id && messages[i].sender._id !== userId) ||( i === messages.length-1 && messages[i].sender._id !== userId )\r\n    ){\r\n        return 0;\r\n    }\r\n\r\n    else return \"auto\";\r\n}\r\n\r\n\r\nexport const isSameUser = (messages, m ,i) => {\r\n    return i > 0 && messages[i-1].sender._id === m.sender._id;\r\n} \r\n","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Helper.js",["204"],[],"import { API } from \"../backend\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nexport const CreateGroup = (data,users,name) => {\r\n    return fetch(`${API}/create/groupChat/${data.user._id}`,{\r\n        method:\"POST\",\r\n        headers:{\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${data.token}`\r\n        },\r\n        body:JSON.stringify({name,users})\r\n    }).then(resp=>{\r\n        return resp.json() ;\r\n    })\r\n}\r\n\r\n\r\nexport const SearchUsers = (data,search) => {\r\n    // console.log(data);\r\n    return fetch(`${API}/${data.user._id}?search=${search}`,{\r\n        method:\"GET\",\r\n        headers:{\r\n            Accept: \"application/json\",\r\n            \"Content-Type\":\"application/json\",\r\n            Authorization: `Bearer ${data.token}`\r\n     }   }).then(response=>{\r\n        \r\n        return response.json();\r\n    })\r\n}\r\n\r\nexport const FetchChats = (data) => {\r\n  \r\n   return (data?(fetch(`${API}/fetch/chats/${data.user._id}`,{\r\n    method:\"GET\",\r\n    headers:{\r\n        Accept: \"application/json\",\r\n        \"Content-Type\":\"application/json\",\r\n        Authorization: `Bearer ${data.token}`\r\n } }).then((response)=>{\r\n    // console.log(response);\r\n    return response.json();\r\n })):( null)) \r\n}\r\n\r\nexport const RenameGroup = (data, chatName, chatId) =>{\r\n    return fetch(`${API}/rename/group`,{\r\n        method:\"PUT\",\r\n    headers:{\r\n        Accept: \"application/json\",\r\n        \"Content-Type\":\"application/json\",\r\n        Authorization: `Bearer ${data.token}`\r\n } ,\r\n body:JSON.stringify(\r\n   \r\n    {chatName,chatId}\r\n )\r\n    }).then(resp=>{\r\n        return resp.json()\r\n    })\r\n}\r\n\r\nexport const Kickout = (data, chatId, userId) => {\r\n   \r\n    return fetch(`${API}/kickOut`,{\r\n        method:\"PUT\",\r\n    headers:{\r\n        Accept: \"application/json\",\r\n        \"Content-Type\":\"application/json\",\r\n        Authorization: `Bearer ${data.token}`\r\n } ,\r\n body:JSON.stringify({ \r\n    \"userId\" : userId,\r\n    \"chatId\" : chatId\r\n })\r\n    })\r\n}\r\n\r\nexport const AddToGroup = (data,chatId,userId) => {\r\n    return fetch(`${API}/addto/group`,{\r\n        method:\"PUT\",\r\n    headers:{\r\n        Accept: \"application/json\",\r\n        \"Content-Type\":\"application/json\",\r\n        Authorization: `Bearer ${data.token}`\r\n } ,\r\n body:JSON.stringify(\r\n   \r\n    {chatId,userId}\r\n )\r\n    })\r\n}\r\n\r\nexport const FetchMessages = (data, user) => {\r\n   \r\n    return (data?(fetch(`${API}/${data._id}/allmessage`,{\r\n        method:\"GET\",\r\n        headers:{ \r\n            Accept: \"application/json\",\r\n            \"Content-Type\":\"application/json\",\r\n            Authorization: `Bearer ${user.token}`\r\n     } }).then((response)=>{\r\n        return response.json();\r\n     })):( null))\r\n}\r\n\r\n\r\nexport const RemoveNotification = (chatId,data) => {\r\n    \r\n    const userId = data.user._id;\r\n    return fetch(`${API}/deletenotification`,{\r\n        method: \"PUT\",\r\n        headers:{\r\n            Accept: \"application/json\",\r\n            \"Content-Type\":\"application/json\",\r\n            Authorization: `Bearer ${data.token}`\r\n        },\r\n        body:JSON.stringify({userId,chatId})\r\n    }).then(response=>{\r\n        return response.json();\r\n    })\r\n}\r\n\r\nexport const SendMessage = (user,ChatId,content) =>{\r\n    return fetch(`${API}/message/send/${user.user._id}`,{\r\n        method: \"POST\",\r\n        headers:{\r\n            Accept: \"application/json\",\r\n            \"Content-Type\":\"application/json\",\r\n            Authorization: `Bearer ${user.token}`\r\n        },\r\n        body:JSON.stringify({ChatId,content})  \r\n    }).then(response=>{\r\n    //    console.log(response);\r\n        return response.json();\r\n    })\r\n}\r\n\r\n\r\nexport const AccessChats = (user,userId,name) => {\r\n    return fetch(`${API}/access/chat/${user.user._id}`,{\r\n        method: \"POST\",\r\n        headers:{\r\n            Accept: \"application/json\",\r\n            \"Content-Type\":\"application/json\",\r\n            Authorization: `Bearer ${user.token}`\r\n        },\r\n        body:JSON.stringify({userId,name})  \r\n    }).then(response=>{\r\n        return response.json();\r\n    }) \r\n}\r\n\r\nexport const GetUser = (data,user) =>{\r\n    return fetch(`${API}/user/${data}`,{\r\n        method:\"GET\",\r\n        headers:{ \r\n            Accept: \"application/json\",\r\n            \"Content-Type\":\"application/json\",\r\n            Authorization: `Bearer ${user.token}`\r\n     } }).then((response)=>{\r\n        return response.json();\r\n     })\r\n}\r\n\r\n\r\nexport const SendNotification = (user,data) =>{\r\n    return fetch(`${API}/storenotification`,{\r\n        method:\"PUT\",\r\n        headers:{ \r\n            Accept: \"application/json\",\r\n            \"Content-Type\":\"application/json\",\r\n            Authorization: `Bearer ${user.token}`\r\n     },\r\n    body:JSON.stringify(data.userId,data.messageId, data.chatId) }).then((response)=>{\r\n        return response.json();\r\n     })\r\n}\r\n\r\n","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Avatar\\UserListItem.js",["205"],[],"import React from 'react'\r\nimport { Box, Avatar, Stack, Typography } from '@mui/material'\r\nexport default function UserListItem({user, handleFunction}) {\r\n\r\n  return (\r\n    <Box onClick={handleFunction} sx={[{bgcolor:\"#E8E8E8\",mt:\"5px\",mb:\"5px\",borderRadius:1 , p:\"5px\", display:\"flex\" , gap:\"20px\",cursor:\"pointer\"},{\r\n        '&:hover':{\r\n            bgcolor:\"#2C3E50\",\r\n            color:\"white\"\r\n        }\r\n    }]}>\r\n        <Avatar sx={{  width: 38, height: 38, border:\"1px solid black\" }} src={user.pic}/>\r\n    <Box sx={{display:\"flex\", flexDirection:\"column\"}}>\r\n        <Typography>{user.name}</Typography>\r\n        <Typography  >{user.email}</Typography>\r\n    </Box>\r\n   \r\n    </Box>\r\n  )\r\n}\r\n","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Avatar\\UserBadgeItem.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\test.js",["206"],[],"import React from \"react\";\r\nimport ProfileModal from \"./Components/Modals/profile\";\r\nimport SideBar from \"./Components/Modals/SideBar\";\r\nexport default function Test(){\r\n    \r\n\r\n        return (\r\n            <div> \r\n                <SideBar/>\r\n                \r\n            </div>\r\n          )\r\n  \r\n}","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Modals\\profile.js",["207","208","209","210","211","212","213"],[],"import React from \"react\";\r\nimport { useState,useEffect } from \"react\";\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\n\r\n\r\nimport {IconButton ,Avatar,Button,Typography ,Box,Dialog,DialogContent,DialogTitle } from \"@mui/material\";\r\nimport { ChatState } from \"../../main/chatProvider\";\r\nimport { GetUser } from \"../Helper\";\r\n\r\nconst ProfileModal = ({ users,children, size }) => {\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n      setOpen(true);\r\n    };\r\n  \r\n    const handleClose = () => {\r\n      setOpen(false);\r\n    };\r\n\r\n      const {selectedChat, setSelectedChat} = ChatState();\r\n    \r\n    const [otherUser, setOtherUser] = useState();\r\n    const loggedUser = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n   var user={};\r\n    if(users.users[0]._id===loggedUser.user._id){\r\n      // console.log(users[0].users);\r\n      user=(users.users[1]);\r\n      // co                               nsole.log(user);\r\n    //\r\n   }\r\n    else{\r\n      // console.log(users);\r\n      // console.log(users.users);\r\n      user=(users.users[0]);\r\n      // console.log(user);\r\n    }\r\n\r\n \r\n    // console.log(object);\r\n    // console.log(ChatState())\r\n\r\n\r\n  \r\n\r\n  \r\n    return (\r\n      <>\r\n        {children ? (\r\n          <span onClick={handleClickOpen}>\r\n            {children}\r\n          </span>\r\n        ) : (\r\n          <>\r\n            <IconButton\r\n              sx={{\r\n                display: { base: 'flex' },\r\n                background: 'inherit',\r\n                borderRadius: '90%',\r\n              }}\r\n              onClick={handleClickOpen}\r\n            >\r\n              <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n                <Avatar\r\n                  size={size}\r\n                  cursor=\"pointer\"\r\n                  alt={user.name}\r\n                  src={user.pic}\r\n                />\r\n                <Typography sx={{ ml: '10px' , color:\"white\"}}>{user.name}</Typography>\r\n                \r\n              </Box>\r\n            </IconButton>\r\n          </>\r\n        )}\r\n    \r\n        <Dialog open={open} maxWidth=\"lg\">\r\n          <DialogTitle sx={{ fontSize: 40, fontFamily: 'QuickSand', textAlign: 'center' }}>\r\n             {user.name}\r\n          </DialogTitle>\r\n          <DialogContent>\r\n            <Box textAlign=\"center\">\r\n              <Avatar sx={{ width: 90, height: 90, m: 'auto', mb: '20px' }} src={user.pic} />\r\n            </Box>\r\n            <Typography align=\"center\">Email: {user.email}</Typography>\r\n          </DialogContent>\r\n          <Button color=\"primary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n        </Dialog>\r\n      </>\r\n    );\r\n    \r\n    \r\n  \r\n    \r\n  };\r\n\r\n  \r\n  export default ProfileModal;","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Modals\\CreateGroupChat.js",["214","215","216","217","218","219"],[],"import * as React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { ChatState } from '../../main/chatProvider';\r\nimport { CreateGroup, SearchUsers } from '../Helper';\r\nimport { isAuthenticated } from '../Auth/Helper/APIcalls';\r\nimport UserListItem from '../Avatar/UserListItem';\r\n\r\n// ----------------------------------------------\r\n// Material UI\r\nimport { Typography, Grid, Snackbar, CircularProgress, Stack, Alert, Box, SxProps} from '@mui/material';\r\n\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport AddIcon from '@mui/icons-material/Add'; \r\nimport { blue } from '@mui/material/colors';\r\nimport UserBadgeItem from '../Avatar/UserBadgeItem';\r\n\r\n\r\n// ------------------------------------------------\r\n\r\n\r\n\r\nexport default function CreateGroupChat({fetchAgain, setFetchAgain}) {\r\n// ----------------------------------------------\r\n// dialog box\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n//   -----------------------------------------------------\r\n\r\n\r\n\r\n// -------------------------------------------------------\r\n// states\r\n   const [groupChatName, setGroupChatName] = useState();\r\n   const [selectedUsers, setSelectedUsers] = useState([]);\r\n   const [search, setSearch] = useState();\r\n   const [searchResults, setSearchResults] = useState([]);\r\n   const [loading, setLoading] = useState(false);\r\n  const [fetch, setFetch] = useState(false);\r\n\r\n  const {user} = ChatState();\r\n \r\n   \r\n//   console.log(user);\r\n  \r\n   \r\n   \r\n   \r\n\r\n// -------------------------------------------------------\r\n\r\n// -------------------------------------------------------\r\n// handle functions\r\n\r\nconst handleSearch = (query) => {\r\n    setSearch(query); \r\n    if(!query){\r\n        return;\r\n    } \r\n\r\n    try{\r\n        setLoading(true);\r\n        SearchUsers(user,query).then((response,err)=>{\r\n            setSearchResults(response)\r\n           \r\n           setFetch(!fetch);\r\n    \r\n        })\r\n    }catch(err){\r\n        \r\n        console.log(err);\r\n        return;\r\n    }\r\n} \r\nuseEffect(()=>{\r\n  setTimeout(()=>{\r\n    setLoading(false);\r\n  },1000)\r\n},[fetch])\r\nconst handleSubmit = () =>{\r\n    if(!groupChatName || !selectedUsers){\r\n        return;\r\n    }\r\n    try{\r\n        CreateGroup(user,selectedUsers,groupChatName).then((response,err)=>{\r\n            // console.log(response);\r\n            setFetchAgain(!fetchAgain);\r\n        })\r\n    }\r\n    catch(err){ \r\n        console.log(err);\r\n        return ;\r\n    }\r\n}\r\n\r\nconst handleGroup = (userToAdd) => {\r\n    if(selectedUsers.includes(userToAdd)){\r\n        <Snackbar open={open} onClose={handleClose} autoHideDuration={4000}>\r\n        <Alert  severity=\"error\" variant='filled' sx={{ width: '100%' }}>\r\n          User Already Added!!\r\n        </Alert>\r\n      </Snackbar>\r\n      return ;\r\n      \r\n\r\n    }\r\n    else  setSelectedUsers([...selectedUsers, userToAdd]);\r\n    \r\n}\r\n\r\nconst handleDelete=(userToDelete)=>{\r\n    setSelectedUsers(\r\n        selectedUsers.filter((sel) => sel._id !== userToDelete._id)\r\n      );\r\n}\r\n// -------------------------------------------------------\r\n\r\nconst sx = {\r\n  \"& .MuiDialog-container\": {\r\n    alignItems: \"flex-start\"\r\n  }\r\n};\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"filled\" sx={[{color:\"white\", bgcolor:\"#32465A\",mt:\"5px\",mr:\"5px\"},{\r\n        \"&:hover\":{\r\n          bgcolor:\"#32465F\",\r\n          color:\"white\",\r\n          \r\n        }\r\n      \r\n      }]} onClick={handleClickOpen}>\r\n        Create Group <AddIcon sx={{ fontSize: 22, mb : \"3px\", ml : \"5px\", color:\"white\" }}/>\r\n      </Button>\r\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"responsive-dialog-title\"  sx={sx}\r\n      fullWidth\r\n    scroll=\"paper\">\r\n        <DialogTitle   >\r\n        <Typography sx={{fontSize: \"30px\" }} variant=\"h5\" align=\"center\">\r\n    Create Group Chat\r\n</Typography>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n         \r\n        <Grid item xs={12} sx={{mb:\"10px\", mt:\"5px\" }}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  size='small'\r\n                  id=\"group name\"\r\n                  label=\"Group Name\"\r\n                  value={groupChatName}\r\n                  onChange={(event)=>{ setGroupChatName(event.target.value)}}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sx={{mb:\"10px\" , mt: \"10px\"}}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  size='small'\r\n                  id=\"add users\"\r\n                  label=\"Add Users\"\r\n                  onChange={(e)=>handleSearch(e.target.value) }\r\n                />\r\n\r\n                <Box sx={{display:\"flex\", fontSize:\"10px\", gap:\"5px\"}}>\r\n                    {selectedUsers.map((u)=>(\r\n                        <UserBadgeItem key={u._id} user={u} handlerfunction={()=>{handleDelete(u)}}/>\r\n                    ))}\r\n                </Box>\r\n\r\n            <Stack direction=\"row\" spacing={10}>  \r\n                <Button variant='filled'  sx={[{bgcolor:\"#2C3E50\", color:\"white\", mt:\"5px\"},{\r\n                                '&:hover':{\r\n                                  bgcolor:\"#2C3E50\", color:\"white\"\r\n                                }\r\n                            }]\r\n                        } onClick={handleSubmit}>Create Chat</Button>\r\n    {loading? (\r\n        <div> <CircularProgress size=\"25px\" sx={{mt:\"12px\"}}/></div>\r\n                   \r\n                  ):( <div></div> )} \r\n                    \r\n            </Stack> \r\n\r\n            {loading? (\r\n        <div> </div> \r\n                  ):(\r\n                    searchResults\r\n                    ?.slice(0, 4)\r\n                    .map((user) => (\r\n                      <UserListItem key={user._id} user={user} handleFunction={()=>handleGroup(user)}/>\r\n                     \r\n                    )))}\r\n           \r\n              </Grid>\r\n        </DialogContent>\r\n        \r\n      </Dialog>\r\n\r\n          \r\n\r\n    </div>\r\n  );\r\n}","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Modals\\UpdateGroupChat.js",["220","221","222","223","224","225","226","227"],[],"import React, { useEffect } from 'react'\r\nimport { useState } from 'react';\r\nimport { ChatState } from '../../main/chatProvider';\r\nimport UserListItem from '../Avatar/UserListItem';\r\n// ------------------------------------\r\n// MUI\r\nimport { Typography, Grid, Snackbar, CircularProgress, Stack, Alert, Box, IconButton} from '@mui/material';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport { blue } from '@mui/material/colors';\r\nimport UserBadgeItem from '../Avatar/UserBadgeItem';\r\nimport RemoveRedEyeRoundedIcon from '@mui/icons-material/RemoveRedEyeRounded';\r\nimport { AddToGroup, FetchChats, Kickout, RenameGroup, SearchUsers } from '../Helper';\r\n// ------------------------------------\r\n\r\n\r\nexport default function UpdateGroupChat({fetchAgain, setFetchAgain, fetchMessages, selectedChat, setSelectedChat}) {\r\n  const [open, setOpen] = React.useState(false);\r\n \r\n  // console.log(selectedChat);\r\n   const [members, setMembers] = useState([]);\r\n   const {user} =    ChatState();\r\n  const [success, setSuccess] = useState(false);\r\n  const [successDel, setSuccessDel] = useState(false);\r\n  const [chatName , setChatName ] = useState(\"\");\r\n//  console.log(user);\r\n  const handleClickOpen = () => {\r\n    if(user)  FetchChats(user).then(response=>{\r\n        if(!selectedChat) setOpen(false);\r\n        \r\n        else{\r\n         \r\n            setMembers(selectedChat.users)\r\n            setChatName(selectedChat.chatName)\r\n            setOpen(true);\r\n      \r\n        }\r\n       \r\n       \r\n      })\r\n\r\n  };\r\n\r\n  \r\n\r\n  \r\n\r\n  const handleClose = () => {\r\n    setFetchAgain(!fetchAgain);\r\n    setOpen(false);\r\n  };\r\n\r\n \r\n\r\n  \r\n// ---------------------------------------------\r\n// STATES\r\n  const [loading, setLoading] = useState(false);\r\n  const [groupChatName, setGroupChatName] = useState(\"\");\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [renameLoading, setRenameLoading] = useState(false);\r\n \r\n\r\n//----------------------------------------------- \r\n  \r\n\r\n// ----------------------------------------------\r\n// Handle functions\r\nconst handleRemove = (userToRemove) => {\r\n  return () => {\r\n    try {\r\n      setLoading(true);\r\n      Kickout(user, selectedChat._id, userToRemove._id)\r\n        .then((response) => {\r\n          console.log(response);\r\n          // setSelectedChat(response);\r\n         \r\n            setFetchAgain(!fetchAgain)\r\n            setLoading(false);\r\n            setSuccessDel(true);\r\n            setMembers(members.filter((u) => u._id !== userToRemove._id));\r\n          \r\n          \r\n        });\r\n    } catch {\r\n      setLoading(false);\r\n    }\r\n  };\r\n};\r\n  \r\n\r\n  const handleRename = () =>{\r\n    if(!groupChatName) return ;\r\n    try{\r\n      setRenameLoading(true);\r\n      \r\n      RenameGroup(user, groupChatName , selectedChat._id).then(response=>{\r\n      //  console.log(response);\r\n      setSelectedChat(response);\r\n       setGroupChatName(response.chatName)\r\n       setTimeout(()=>{\r\n        setRenameLoading(false);\r\n        setFetchAgain(!fetchAgain)\r\n        setChatName(groupChatName);\r\n       },200)\r\n       \r\n        // setFetchAgain(!fetchAgain);\r\n      })\r\n    }\r\n    catch(err){\r\n      setRenameLoading(false);\r\n      <Snackbar open={true} autoHideDuration={4000}>\r\n      <Alert onClose={handleClose} severity=\"error\" variant='filled' sx={{ width: '100%' }}>\r\n       Error Occured!\r\n      </Alert>\r\n    </Snackbar>\r\n    }\r\n\r\n    setGroupChatName(\"\");\r\n  }\r\n\r\n  const handleSearch = (query) => {\r\n    \r\n    setSearch(query); \r\n    if(!query){\r\n        return;\r\n    } \r\n\r\n    try{\r\n        setLoading(true)\r\n        SearchUsers(user,query).then((response,err)=>{\r\n          \r\n          setSearchResults(response);\r\n          setTimeout(()=>{\r\n            setLoading(false);\r\n          },500)\r\n    \r\n        })\r\n    }catch(err){\r\n        console.log(err);\r\n        return;\r\n    }\r\n} \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst handleAddUser = (userToAdd) => {\r\n  if(selectedChat.users.find((u)=>u._id === userToAdd._id)){\r\n    <Snackbar open={true} autoHideDuration={4000}>\r\n    <Alert onClose={handleClose} severity=\"error\" variant='filled' sx={{ width: '100%' }}>\r\n     User Already in group!!\r\n    </Alert>\r\n  </Snackbar>\r\n  return ;\r\n  }\r\n\r\n  try{\r\n    setLoading(true);\r\n   \r\nAddToGroup(user,selectedChat._id,userToAdd._id).then(response=>{\r\n  setLoading(false)\r\n  setFetchAgain(!fetchAgain)\r\n setSuccess(true);\r\n  setMembers([...members,response]);\r\nconsole.log(members);\r\n// setSelectedChat(response);\r\n// setFetchAgain(!fetchAgain);\r\n})\r\n  }\r\n  catch(err){\r\n  \r\n      <Snackbar open={true} autoHideDuration={4000}>\r\n      <Alert onClose={handleClose} severity=\"error\" variant='filled' sx={{ width: '100%' }}>\r\n       Error Occured!\r\n      </Alert>\r\n    </Snackbar>\r\n  }\r\n\r\n}\r\n\r\nconst Array = () => {\r\n  return members.map((u) => (\r\n    <React.Fragment key={u._id}>\r\n      <Snackbar\r\n        open={success}\r\n        autoHideDuration={2000}\r\n        onClose={() => {\r\n          setSuccess(false);\r\n        }}\r\n      >\r\n        <Alert onClose={handleClose} severity=\"success\" variant=\"filled\" sx={{ width: '100%' }}>\r\n          User Added!!\r\n        </Alert>\r\n      </Snackbar>\r\n      <UserBadgeItem key={u._id} user={u} handlerfunction={handleRemove(u)} />\r\n    </React.Fragment>\r\n  ));\r\n};\r\n\r\n// ----------------------------------------------\r\n\r\nreturn (\r\n  <>\r\n    <Snackbar open={successDel} autoHideDuration={2000}onClose={()=>{\r\n      setSuccessDel(false);\r\n    }} >\r\n      <Alert onClose={handleClose} severity=\"success\" variant='filled' sx={{ width: '100%' }}>\r\n       User Deleted Successfully!!\r\n      </Alert>\r\n    </Snackbar>\r\n\r\n    <Stack direction=\"row\" >\r\n    <IconButton onClick={handleClickOpen} sx={[{borderRadius:\"4px\",m:\"4px\",bgcolor:\"#32465A\",color:\"white\"},{\r\n      '&:hover':{\r\n        bgcolor:\"#F0EEED\",\r\n        color:\"#32465A\"\r\n      }\r\n    }]}>\r\n  <RemoveRedEyeRoundedIcon sx={{m:\"4px\"}}   />\r\n  </IconButton>\r\n\r\n  {open? (\r\n       <Dialog open={open} onClose={handleClose} aria-labelledby=\"responsive-dialog-title\" >\r\n     <DialogTitle>\r\n  <Typography align=\"center\">\r\n    {chatName}\r\n  </Typography>\r\n</DialogTitle>\r\n       <DialogContent>\r\n \r\n       <Box sx={{display:\"flex\", fontSize:\"10px\", gap:\"5px\"}}>\r\n                   {Array()}\r\n               </Box>\r\n        \r\n       <Grid item xs={12} sx={{mb:\"10px\" , mt: \"10px\"}}>\r\n               <TextField  \r\n                 size='small'\r\n                 id=\"group name\"\r\n                 label=\"Chat Name\"\r\n                 value={groupChatName}\r\n                 onChange={(event)=>{ setGroupChatName(event.target.value) \r\n               } }\r\n               \r\n               />\r\n               <Button variant='contained' sx={[{ml:\"4px\",mt:\"2px\", bgcolor:\"#00A884\"},{\r\n                \"&:hover\":{\r\n                  bgcolor:\"#00A884\"\r\n                }\r\n               }]} onClick={handleRename} >Update</Button>\r\n             </Grid>\r\n             <Grid item xs={12} sx={{mb:\"10px\" , mt: \"10px\"}}>\r\n               <TextField\r\n                size='small'\r\n                 fullWidth\r\n                 id=\"add users\"\r\n                 label=\"Add User to group\"\r\n                 onChange={(e)=>(handleSearch(e.target.value)) }\r\n               />\r\n          \r\n             </Grid>\r\n             \r\n           \r\n              \r\n               <Stack direction=\"row\" spacing={15}>\r\n               <Button variant='contained' onClick={handleRemove(user)} sx={[{ml:\"4px\",mt:\"2px\", bgcolor:\"#D82E2F\"},{\r\n               '&:hover':{\r\n                 bgcolor:\"#D82E2F\"\r\n               }\r\n             }]} >Leave Group</Button>\r\n               {loading? (\r\n        <div> <CircularProgress size=\"23px\" sx={{mt:\"12px\",color:\"blue\"}}/></div>\r\n                   \r\n                  ):( <div></div> )} \r\n               </Stack>\r\n\r\n               {loading? (\r\n        <div> </div> \r\n                  ):(\r\n                    searchResults\r\n                    ?.slice(0, 4)\r\n                    .map((user) => (\r\n                      <UserListItem key={user._id} user={user} handleFunction={()=>handleAddUser(user)}/>\r\n                     \r\n                    )))}\r\n           \r\n       </DialogContent>\r\n       \r\n     </Dialog>\r\n                   \r\n                  ):(<></> )} \r\n      \r\n    </Stack>\r\n\r\n  \r\n  \r\n  \r\n  </>\r\n)\r\n}\r\n","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Modals\\SideBar.js",["228","229"],[],"import React from 'react';\r\nimport { useState ,useEffect} from 'react';\r\nimport { Grid, Typography, TextField, Stack, CircularProgress, Avatar, IconButton, Tooltip, Popover, MenuItem, ListItemIcon } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport Drawer from '@mui/material/Drawer';\r\nimport Button from '@mui/material/Button';\r\nimport { Logout } from '@mui/icons-material';\r\nimport { SearchUsers } from '../Helper';\r\nimport { ChatState } from '../../main/chatProvider';\r\nimport UserListItem from '../Avatar/UserListItem';\r\n\r\nimport { AccessChats } from '../Helper';\r\nimport { useNavigate } from 'react-router-dom';\r\nexport default function SideBar() {\r\n  const [state, setState] = React.useState({\r\n    left: false,\r\n  });\r\n  const [fetch, setFetch] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const { user, setUser } = ChatState();\r\n  const [open, setOpen] = useState(false);\r\n  const { selectedChat, setSelectedChat } = ChatState();\r\n  const navigate = useNavigate();\r\n\r\n  const userLogout = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    navigate(\"/\");\r\n  }\r\n\r\n\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n      return;\r\n    }\r\n    setOpen(true);\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      setLoading(false);\r\n    }, 1000);\r\n  }, [fetch]);\r\n\r\n  const handleSearch = (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      SearchUsers(user, query).then((response, err) => {\r\n        setSearchResults(response);\r\n        setFetch(!fetch);\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n      return;\r\n    }\r\n  };\r\n\r\n  const onClick = (receiver) => {\r\n    try {\r\n      AccessChats(user, receiver._id, receiver.name).then((response) => {\r\n        setSelectedChat(response[0]);\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  const Search = () => {\r\n    return (\r\n      <Grid item xs={12} sx={{ ml: \"5px\", mb: \"10px\", mt: \"1px\" }}>\r\n        <TextField\r\n          size=\"small\"\r\n          id=\"group name\"\r\n          label=\"Search by name or email\"\r\n          sx={{ color: \"blue\" }}\r\n          onChange={(e) => {\r\n            handleSearch(e.target.value);\r\n          }}\r\n        />\r\n        <Button\r\n          variant=\"contained\"\r\n          sx={[\r\n            { ml: \"4px\", mt: \"2px\", bgcolor: \"#2C3E50\", mr: \"5px\" },\r\n            {\r\n              \"&:hover\": {\r\n                bgcolor: \"white\",\r\n                color: \"#2C3E50\",\r\n              },\r\n            },\r\n          ]}\r\n          onClick={() => {\r\n            handleSearch(search);\r\n          }}\r\n        >\r\n          Search\r\n        </Button>\r\n\r\n        <Stack direction=\"row\" spacing={10}>\r\n          {loading ? (\r\n            <div>\r\n              <CircularProgress size=\"25px\" sx={{ mt: \"12px\" }} />\r\n            </div>\r\n          ) : (\r\n            <div></div>\r\n          )}\r\n        </Stack>\r\n\r\n        {loading ? (\r\n          <div></div>\r\n        ) : (\r\n          searchResults\r\n            ?.slice(0, 4)\r\n            .map((user) => (\r\n              <Box key={user._id} sx={{ mr: \"10px\" }}>\r\n                <UserListItem key={user._id} user={user} handleFunction={() => onClick(user)} />\r\n              </Box>\r\n            ))\r\n        )}\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const openMenu = Boolean(anchorEl);\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n  const handleCloseMenu = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n      <React.Fragment>\r\n        <Button onClick={toggleDrawer()}>\r\n          <SearchIcon sx={{ color: \"#32465A\" }} />\r\n        </Button>\r\n\r\n        {open ? (\r\n          <Drawer open={open} onClose={handleClose}>\r\n            <Typography align=\"center\" sx={{ mr: \"10px\", mt: \"5px\", fontSize: \"1.5rem\", color: \"#2C3E50\" }}>\r\n              Search Users\r\n            </Typography>\r\n            <Box sx={{ border: \"1px solid #2C3E50\", mb: \"5px\" }}></Box>\r\n            {Search()}\r\n          </Drawer>\r\n        ) : (\r\n          <></>\r\n        )}\r\n      </React.Fragment>\r\n\r\n      <Tooltip title=\"My Profile\">\r\n        <IconButton onClick={handleClick}>\r\n          <Avatar sx={{ width: \"30px\", height: \"30px\" }} src={user.user.pic} />\r\n        </IconButton>\r\n      </Tooltip>\r\n{/* The Popover component in MUI (Material-UI) is a versatile component that helps to display content in a floating container that appears above other elements in the UI. It is often used to create tooltips, dropdown menus, pop-up dialogs, or any other content that needs to be displayed in a separate container */}\r\n<Popover\r\n  id=\"account-menu\"\r\n  open={openMenu}\r\n  anchorEl={anchorEl}\r\n  onClose={handleCloseMenu}\r\n  anchorOrigin={{\r\n    vertical: 'bottom',\r\n    horizontal: 'right',\r\n  }}\r\n  transformOrigin={{\r\n    vertical: 'top',\r\n    horizontal: 'right',\r\n  }}\r\n>\r\n  <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'center', padding: '16px' }}>\r\n    <Avatar sx={{ width: '64px', height: '64px', mb: '8px' }} src={user.user.pic} />\r\n    <Typography variant=\"subtitle1\" sx={{ mb: '4px' }}>{user.user.name}</Typography>\r\n    <Typography variant=\"body2\" sx={{ mb: '8px' }}>{user.user.email}</Typography>\r\n    <MenuItem sx={[{bgcolor:\"#DE4839\",color:\"white\", borderRadius:\"4px\"},{\r\n      \"&:hover\":{\r\n        bgcolor:\"#DE4839\",color:\"white\"\r\n      }\r\n    }]} onClick={userLogout}>\r\n      <ListItemIcon sx={{color:\"white\"}}>\r\n        <Logout fontSize=\"small\" />\r\n      </ListItemIcon>\r\n      Logout\r\n    </MenuItem>\r\n  </Box>\r\n</Popover>\r\n\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\chatloading.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Pages\\ChatPage.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\ChatBox.js",["230","231"],[],"import React from 'react'\r\nimport SingleChat from './SingleChat';\r\nimport { ChatState } from '../main/chatProvider';\r\nimport { Box } from '@mui/material';\r\nimport ScrollableFeed from 'react-scrollable-feed';\r\nimport LOGO from \"../logo.png\"\r\nexport default function ChatBox({fetchAgain, setFetchAgain}) {\r\n    const {selectedChat} = ChatState();\r\n  return (\r\n    <>\r\n    {selectedChat?(\r\n   \r\n   <Box\r\n    sx={{display:\"flex\",alignItems:\"center\",flexDirection:\"column\",height:\"94vh\",borderRadius:\"4px\", width:{xs:\"98%\", md:\"69%\", lg:\"69%\"}, bgcolor:\"#F0EEED\",mt:\"10px\",m:{xs:\"auto\", md:\"0px\",lg:\"0px\"\r\n}}}>\r\n       \r\n             <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n\r\n    </Box>):(<>\r\n    <Box sx={{display:{xs:\"none\",md:\"flex\",lg:\"flex\"},margin:\"auto\"}}><img style={{ width:\"35vw\", border:\"1px solid white\", borderRadius:\"4px\"}} src={LOGO}/></Box>\r\n    </>)}\r\n    </>\r\n  )\r\n}\r\n","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\SingleChat.js",["232","233","234","235","236","237","238","239","240","241","242","243"],[],"import React from 'react'\r\nimport { useState, useEffect } from 'react'\r\nimport { ChatState } from '../main/chatProvider'\r\nimport ProfileModal from './Modals/profile'\r\nimport UpdateGroupChat from './Modals/UpdateGroupChat'\r\nimport { API } from '../backend'\r\nimport { FetchMessages, RemoveNotification, SendMessage } from './Helper'\r\nimport { IconButton, Typography, Grid, TextField, Button , Box, Stack} from '@mui/material'\r\nimport { getOtherUser } from '../configuration/logic' \r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport { CircularProgress } from '@mui/material';\r\nimport ScrollableChats from './ScrollableChats'\r\nimport SendIcon from '@mui/icons-material/Send';\r\nimport io from \"socket.io-client\"\r\nimport { TrySharp } from '@mui/icons-material'\r\nimport { GetUser } from './Helper'\r\nimport { useRef } from 'react'\r\n\r\nvar socket, selectedChatCompare, lastRoom;\r\n\r\n\r\nexport default function SingleChat({fetchAgain, setFetchAgain}) {\r\n    const [messages, setMessages]  = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [newMessage, setNewMessage] = useState(\"\");\r\n    const [socketConnected, setSocketConnected] = useState(false);\r\n    const [typing, setTyping] = useState(false);\r\n    const [isTyping , setIsTyping ] = useState(false);\r\n\r\n   \r\n\r\n\r\n    const {\r\n        user,\r\n        selectedChat,\r\n        setSelectedChat,\r\n        notification,\r\n        setNotification,\r\n        sendNotification,\r\n        removeNotification\r\n    } = ChatState();\r\n\r\n        \r\n    // console.log(socket);\r\n    useEffect(()=>{\r\n        socket = io.connect(\"http://localhost:8080\");\r\n        \r\n        socket.emit(\"setup\",user);\r\n        socket.on(\"connected\",()=>setSocketConnected(true));\r\n        socket.on(\"typing\",()=>{\r\n            setIsTyping(true);\r\n        });\r\n        socket.on(\"stop typing\", ()=> setIsTyping(false));\r\n    },[]); \r\n\r\n    // console.log(notification);\r\n\r\n    // fetchMessages responsible for fetching the messages related to selected chat. it asynchronoulsy retrieces messages from a server . It assures that the appropriate messages are loaded for the currently selected chat\r\n    const fetchMessages = () => {\r\n        try{\r\n            FetchMessages(selectedChat,user).then(response=>{\r\n                setMessages(response);\r\n                setLoading(false);\r\n                socket.emit(\"join chat\", selectedChat._id);\r\n            })\r\n        }\r\n        catch(err){\r\n            setLoading(false);\r\n        }\r\n    \r\n    }\r\n\r\n    const removeNotifications = (chatId,user) => {\r\n        try{\r\n            RemoveNotification(chatId,user).then(data=>{\r\n                var notificationArray = [];\r\n                data.notifications.forEach((element)=>{\r\n                    notificationArray.push(element.message)\r\n                })\r\n\r\n                setNotification(notificationArray);\r\n            })\r\n        }\r\n        catch(err){\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n\r\n    const sendMessage = (user,chatId,content) => {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        if(content){\r\n            try{\r\n                SendMessage(user,chatId,content).then((response)=>{\r\n                    // console.log(response);\r\n                    socket.emit(\"new message\", (response));\r\n                    console.log(messages);\r\n                    fetchMessages();\r\n                    setMessages([...messages, response]);\r\n                  \r\n                    setFetchAgain(!fetchAgain);\r\n                    sendNotification(response);\r\n                    setNewMessage(\"\");\r\n                }) \r\n            }\r\n            catch(err){\r\n                setNewMessage(\"\");\r\n                console.log(err);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // below code emits leave room when a new chat is selected the code emits this emit informs the server that the user is leaving the previous chat room\r\n    // updating last room to hold the current selectedChat this ensures that the correct chat room is left when a new chat is selected\r\n    // selectedChatCompare is assigned to value of current selectedChat. It used to compare the current selected chat with the new messages recieved in the second useEffect hook this comparison helps to determine is the new message should trigger a notification or update the exisiting messages                                               \r\n\r\n\r\n    useEffect(()=>{\r\n        fetchMessages();\r\n        setFetchAgain(!fetchAgain);\r\n        if(selectedChat){\r\n            socket.emit(\"leave room\", lastRoom);\r\n            lastRoom = selectedChat._id;\r\n        }\r\n\r\n        selectedChatCompare = selectedChat;\r\n\r\n\r\n    },[selectedChat])\r\n \r\n    useEffect(()=>{\r\n        socket.on(\"message received\", (newMessageReceived) => {\r\n            fetchMessages();\r\n            setFetchAgain(!fetchAgain);\r\n            // console.log(messages);\r\n            // console.log(newMessageReceived);\r\n            if(\r\n                !selectedChatCompare || selectedChatCompare._id !== newMessageReceived.chat._id\r\n            ){\r\n            if(!notification.includes(newMessageReceived)){\r\n                    setNotification([newMessageReceived, ...notification]);\r\n                    setFetchAgain(!fetchAgain);\r\n                  \r\n            }\r\n            } else {\r\n                setMessages([...messages, newMessageReceived]);\r\n                removeNotifications(newMessageReceived.chat._id, user)\r\n            }\r\n        })\r\n    },[])\r\n\r\n//    below code keeps track of user typing in the chat input field it emits typign and sto typing events to server to notify other users in the chat room about typing activity \r\n    const typingHandler = (e) => {\r\n        setNewMessage(e.target.value);\r\n        if(!socketConnected) return;\r\n\r\n        if(!typing){\r\n            // selectedchat._id is sent along with the evneet to identify the chat room where the typing is occuring\r\n            setTyping(true);\r\n            socket.emit(\"typing\",selectedChat._id);\r\n        }\r\n\r\n        // to get current timestamp when the user started typing\r\n        let lastTypingTime = new Date().getTime();\r\n\r\n        // the timerLength represents the duration after which the typing state will be considered inactive if no further typing occurs\r\n        var timerLength = 3000;\r\n\r\n\r\n        setTimeout(()=>{\r\n            var timeNow = new Date().getTime();\r\n            var timeDiff = timeNow - lastTypingTime;\r\n\r\n            // it checks current time - lastTypingtime >= timeLength and if user still typing \r\n            if(timeDiff >= timerLength && typing){\r\n                socket.emit(\"stop typing\",selectedChat._id);\r\n                setTyping(false);\r\n            }\r\n        }, timerLength);\r\n    }\r\n\r\n// console.log(messages);\r\n//    console.log(selectedChat);\r\n\r\n\r\n    \r\n  return (\r\n    <>\r\n    {selectedChat? (\r\n     <> \r\n    \r\n     <Box sx={{display:\"flex\",m:\"4px\",\r\n     borderRadius:\"5px\",bgcolor:\"#2C3E50\",color:\"white\", width:{xs:\"95vw\", md:\"67vw\", lg:\"67vw\"}}} >\r\n        <Box sx={{ display:\"inherit\"}} >\r\n            {!selectedChat.isGroupChat ? (\r\n                <>\r\n                <Box>\r\n                    <ProfileModal\r\n                    users={selectedChat}\r\n                    />\r\n                </Box>\r\n\r\n                </>\r\n            ):(\r\n                <>\r\n                \r\n                <Box sx={{display:\"flex\",width:\"inherit\", alignItems: 'center'}} >\r\n                    <UpdateGroupChat\r\n                    selectedChat={selectedChat}\r\n                    setSelectedChat={setSelectedChat}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                    fetchMessages={fetchMessages}\r\n                    />\r\n                    <Typography >{selectedChat.chatName.toUpperCase()}</Typography>\r\n                   \r\n       \r\n                    </Box>\r\n                    </>\r\n            )}\r\n        </Box>\r\n        <IconButton sx={{ml:\"auto\"}} onClick={()=>{\r\n            setSelectedChat(\"\");\r\n        }} >\r\n          \r\n            <CloseIcon sx={{color:\"white\"}}/>\r\n        </IconButton>\r\n\r\n       \r\n     </Box>\r\n\r\n     <Box sx={{width:\"98%\"}} >\r\n        {loading? (\r\n            <CircularProgress/>\r\n        ):(\r\n            <Box sx={{ height: \"calc(100vh - 64px)\", display: \"flex\", flexDirection: \"column\" }}>\r\n            <ScrollableChats messages={messages}/>\r\n          \r\n            <Box sx={{ borderTop: \"1px solid #ccc\",  padding: \"10px\" }}>\r\n              <Box sx={{ display: \"flex\" }}>\r\n                <TextField\r\n                  fullWidth\r\n                  sx={{ bgcolor: \"white\", borderRadius: \"5px\", marginRight: \"10px\" }}\r\n                  size=\"small\"\r\n                  id=\"send-message\"\r\n                  label=\"Message\"\r\n                  value={newMessage}\r\n                  onChange={typingHandler}\r\n                />\r\n          \r\n                <IconButton sx={[{bgcolor:\"#2C3E50\",color:\"white\",pl:\"14px\"},{\r\n                    \"&:hover\":{\r\n                        color:\"#2C3E50\",\r\n                        bgcolor:\"white\"\r\n                    }\r\n                }]} onClick={() => sendMessage(user, selectedChat._id, newMessage)}>\r\n                  <SendIcon />\r\n                </IconButton>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n        )}\r\n\r\n        {isTyping?(<>\r\n        <div>\r\n            </div></>):(<>\r\n            </>)}\r\n     </Box>\r\n     </>\r\n    ):(<Box>\r\n        <Typography sx={{color:\"white\"}}>\r\n            Click on a user to start chatting\r\n        </Typography>\r\n    </Box>)}\r\n    </>\r\n  )\r\n}\r\n","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\ScrollableChats.js",["244","245","246","247","248","249","250","251"],[],"import { Avatar, Box, Paper, Stack, Tooltip } from '@mui/material';\r\nimport React from 'react'\r\nimport { useRef,useEffect } from 'react';\r\nimport { isSameSender, isSameSenderMargin, isSameUser } from '../configuration/logic';\r\nimport { ChatState } from '../main/chatProvider';\r\nimport { isLastMessage } from '../configuration/logic';\r\nimport ScrollableFeed from \"react-scrollable-feed\"\r\nimport \"../styles.css\"\r\nimport {Scrollbar} from \"react-scrollbars-custom\"\r\nexport default function ScrollableChats({messages}) {\r\n\r\n    const {user , selectedChat} = ChatState();\r\n//     console.log(selectedChat);\r\n\r\n//     console.log(messages[0].sender._id);\r\n// console.log(user.user._id);\r\nconst chatRef = useRef(null);\r\n\r\nuseEffect(() => {\r\n  \r\n  if (chatRef.current) {\r\n    // Scroll to the bottom of the chat component\r\n    chatRef.current.scrollTop = chatRef.current.scrollHeight;\r\n  }\r\n}, [messages]);\r\n\r\nreturn (\r\n  <Paper\r\n    style={{\r\n      maxHeight: '84%',\r\n      overflow: 'auto',\r\n      width: '100%',\r\n      height: '95vh',\r\n      paddingLeft:\"4px\",\r\n      paddingRight:\"4px\",\r\n      \r\n    }}\r\n    ref={chatRef}\r\n  >\r\n    {messages &&\r\n      messages.map((m, i) => (\r\n        <div style={{ display: 'flex' }} key={m._id}>\r\n          {/* Render Avatar component here */}\r\n          <span\r\n            style={{\r\n              backgroundColor: `${\r\n                m.sender._id === user.user._id ? '#BEE3F8' : '#B9F5D0'\r\n              }`,\r\n              borderRadius: '20px',\r\n              padding: '5px 15px',\r\n              maxWidth: '75%',\r\n              marginLeft: selectedChat.isGroupChat\r\n                ? isSameSenderMargin(messages, m, i, user.user._id)\r\n                : m.sender._id === user.user._id\r\n                ? 'auto'\r\n                : '0px',\r\n              marginTop: isSameUser(messages, m, i) ? 3 : 10,\r\n            }}\r\n          >\r\n            {m.content}\r\n          </span>\r\n        </div>\r\n      ))}\r\n  </Paper>\r\n);\r\n}","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Helper.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\cloudinary.js",["252","253","254"],[],"import React, { useState } from \"react\";\r\nimport { API } from \"./backend\";\r\nfunction Cloudinary(){\r\nconst [file,setFile]=useState(\"\");\r\nconst [image,setImage]=useState(\"\");\r\n//function for previewing files before uploading\r\n//function used to enable it to show on frontend\r\nfunction handleChange(event) {\r\n    const file = event.target.files[0];\r\n  \r\n    if (file) {\r\n      const reader = new FileReader();\r\n  \r\n      // Convert the file to Base64 encoding\r\n      reader.readAsDataURL(file);\r\n  \r\n      reader.onloadend = function () {\r\n        const base64Image = reader.result;\r\n  \r\n        // Call your API endpoint and pass the base64Image in the request body\r\n        handleSubmit(base64Image);\r\n      };\r\n    }\r\n  }\r\nfunction handleSubmit(imageData) {\r\n    console.log(imageData)\r\n    // Make the API request with the imageData in the request body\r\n   fetch(`${API}/cloudinary`, {\r\n        mode:\"no-cors\",\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body:{ imageData},\r\n    })\r\n    \r\n      .then((imageData) => {\r\n        console.log(JSON.stringify({ image: imageData }));\r\n        // Handle the response from the server\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        // Handle any errors\r\n      });\r\n  }\r\n    return (\r\n        <>\r\n        <div>\r\n            <form onSubmit={event=>handleSubmit(event)}>\r\n                <label htmlFor=\"fileInput\">Upload Your image</label>\r\n                <input type=\"file\" id=\"fileInput\" onChange={event=>handleChange(event)} required \r\n                accept=\"image.png,image.jpeg,image.peg,image.jfif\"\r\n                />\r\n                <button className=\"btn btn-primary\">Submit</button>\r\n            </form>\r\n        </div>\r\n        {/* //making it able to see on our online interface */}\r\n        <img src={image} alt=\"\" />\r\n        </>\r\n    )\r\n}\r\nexport default Cloudinary","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Pages\\HomePage.js",[],[],{"ruleId":"255","severity":1,"message":"256","line":2,"column":11,"nodeType":"257","messageId":"258","endLine":2,"endColumn":14},{"ruleId":"255","severity":1,"message":"259","line":4,"column":8,"nodeType":"257","messageId":"258","endLine":4,"endColumn":10},{"ruleId":"255","severity":1,"message":"260","line":8,"column":8,"nodeType":"257","messageId":"258","endLine":8,"endColumn":15},{"ruleId":"261","severity":1,"message":"262","line":34,"column":7,"nodeType":"263","messageId":"264","endLine":34,"endColumn":8,"fix":"265"},{"ruleId":"255","severity":1,"message":"266","line":3,"column":23,"nodeType":"257","messageId":"258","endLine":3,"endColumn":31},{"ruleId":"255","severity":1,"message":"267","line":12,"column":8,"nodeType":"257","messageId":"258","endLine":12,"endColumn":24},{"ruleId":"255","severity":1,"message":"268","line":13,"column":8,"nodeType":"257","messageId":"258","endLine":13,"endColumn":16},{"ruleId":"255","severity":1,"message":"269","line":20,"column":23,"nodeType":"257","messageId":"258","endLine":20,"endColumn":36},{"ruleId":"255","severity":1,"message":"270","line":31,"column":11,"nodeType":"257","messageId":"258","endLine":31,"endColumn":19},{"ruleId":"255","severity":1,"message":"271","line":33,"column":11,"nodeType":"257","messageId":"258","endLine":33,"endColumn":23},{"ruleId":"255","severity":1,"message":"266","line":3,"column":23,"nodeType":"257","messageId":"258","endLine":3,"endColumn":31},{"ruleId":"255","severity":1,"message":"267","line":12,"column":8,"nodeType":"257","messageId":"258","endLine":12,"endColumn":24},{"ruleId":"255","severity":1,"message":"268","line":13,"column":8,"nodeType":"257","messageId":"258","endLine":13,"endColumn":16},{"ruleId":"255","severity":1,"message":"269","line":20,"column":23,"nodeType":"257","messageId":"258","endLine":20,"endColumn":36},{"ruleId":"255","severity":1,"message":"272","line":26,"column":12,"nodeType":"257","messageId":"258","endLine":26,"endColumn":16},{"ruleId":"255","severity":1,"message":"273","line":26,"column":18,"nodeType":"257","messageId":"258","endLine":26,"endColumn":25},{"ruleId":"255","severity":1,"message":"274","line":30,"column":12,"nodeType":"257","messageId":"258","endLine":30,"endColumn":19},{"ruleId":"255","severity":1,"message":"275","line":30,"column":21,"nodeType":"257","messageId":"258","endLine":30,"endColumn":31},{"ruleId":"255","severity":1,"message":"270","line":31,"column":11,"nodeType":"257","messageId":"258","endLine":31,"endColumn":19},{"ruleId":"255","severity":1,"message":"271","line":33,"column":11,"nodeType":"257","messageId":"258","endLine":33,"endColumn":23},{"ruleId":"276","severity":1,"message":"277","line":35,"column":16,"nodeType":"278","messageId":"279","endLine":35,"endColumn":18},{"ruleId":"276","severity":1,"message":"277","line":38,"column":21,"nodeType":"278","messageId":"279","endLine":38,"endColumn":23},{"ruleId":"255","severity":1,"message":"280","line":59,"column":14,"nodeType":"257","messageId":"258","endLine":59,"endColumn":23},{"ruleId":"255","severity":1,"message":"266","line":3,"column":23,"nodeType":"257","messageId":"258","endLine":3,"endColumn":31},{"ruleId":"255","severity":1,"message":"281","line":5,"column":10,"nodeType":"257","messageId":"258","endLine":5,"endColumn":22},{"ruleId":"255","severity":1,"message":"267","line":12,"column":8,"nodeType":"257","messageId":"258","endLine":12,"endColumn":24},{"ruleId":"255","severity":1,"message":"268","line":13,"column":8,"nodeType":"257","messageId":"258","endLine":13,"endColumn":16},{"ruleId":"255","severity":1,"message":"282","line":14,"column":8,"nodeType":"257","messageId":"258","endLine":14,"endColumn":12},{"ruleId":"255","severity":1,"message":"269","line":20,"column":23,"nodeType":"257","messageId":"258","endLine":20,"endColumn":36},{"ruleId":"255","severity":1,"message":"271","line":33,"column":11,"nodeType":"257","messageId":"258","endLine":33,"endColumn":23},{"ruleId":"255","severity":1,"message":"283","line":7,"column":10,"nodeType":"257","messageId":"258","endLine":7,"endColumn":22},{"ruleId":"255","severity":1,"message":"284","line":22,"column":5,"nodeType":"257","messageId":"258","endLine":22,"endColumn":17},{"ruleId":"255","severity":1,"message":"274","line":27,"column":8,"nodeType":"257","messageId":"258","endLine":27,"endColumn":15},{"ruleId":"255","severity":1,"message":"275","line":27,"column":17,"nodeType":"257","messageId":"258","endLine":27,"endColumn":27},{"ruleId":"285","severity":1,"message":"286","line":46,"column":5,"nodeType":"287","endLine":46,"endColumn":17,"suggestions":"288"},{"ruleId":"289","severity":1,"message":"290","line":86,"column":13,"nodeType":"291","messageId":"279","endLine":86,"endColumn":18},{"ruleId":"255","severity":1,"message":"292","line":3,"column":10,"nodeType":"257","messageId":"258","endLine":3,"endColumn":19},{"ruleId":"255","severity":1,"message":"293","line":4,"column":10,"nodeType":"257","messageId":"258","endLine":4,"endColumn":13},{"ruleId":"255","severity":1,"message":"294","line":5,"column":10,"nodeType":"257","messageId":"258","endLine":5,"endColumn":23},{"ruleId":"255","severity":1,"message":"270","line":13,"column":11,"nodeType":"257","messageId":"258","endLine":13,"endColumn":19},{"ruleId":"255","severity":1,"message":"295","line":22,"column":11,"nodeType":"257","messageId":"258","endLine":22,"endColumn":26},{"ruleId":"276","severity":1,"message":"277","line":9,"column":20,"nodeType":"278","messageId":"279","endLine":9,"endColumn":22},{"ruleId":"255","severity":1,"message":"296","line":2,"column":10,"nodeType":"257","messageId":"258","endLine":2,"endColumn":21},{"ruleId":"255","severity":1,"message":"297","line":2,"column":23,"nodeType":"257","messageId":"258","endLine":2,"endColumn":28},{"ruleId":"255","severity":1,"message":"298","line":2,"column":8,"nodeType":"257","messageId":"258","endLine":2,"endColumn":20},{"ruleId":"255","severity":1,"message":"292","line":2,"column":19,"nodeType":"257","messageId":"258","endLine":2,"endColumn":28},{"ruleId":"255","severity":1,"message":"299","line":3,"column":8,"nodeType":"257","messageId":"258","endLine":3,"endColumn":17},{"ruleId":"255","severity":1,"message":"300","line":9,"column":10,"nodeType":"257","messageId":"258","endLine":9,"endColumn":17},{"ruleId":"255","severity":1,"message":"301","line":23,"column":14,"nodeType":"257","messageId":"258","endLine":23,"endColumn":26},{"ruleId":"255","severity":1,"message":"302","line":23,"column":28,"nodeType":"257","messageId":"258","endLine":23,"endColumn":43},{"ruleId":"255","severity":1,"message":"303","line":25,"column":12,"nodeType":"257","messageId":"258","endLine":25,"endColumn":21},{"ruleId":"255","severity":1,"message":"304","line":25,"column":23,"nodeType":"257","messageId":"258","endLine":25,"endColumn":35},{"ruleId":"255","severity":1,"message":"305","line":5,"column":10,"nodeType":"257","messageId":"258","endLine":5,"endColumn":25},{"ruleId":"255","severity":1,"message":"306","line":10,"column":75,"nodeType":"257","messageId":"258","endLine":10,"endColumn":82},{"ruleId":"255","severity":1,"message":"307","line":15,"column":8,"nodeType":"257","messageId":"258","endLine":15,"endColumn":21},{"ruleId":"255","severity":1,"message":"308","line":17,"column":8,"nodeType":"257","messageId":"258","endLine":17,"endColumn":25},{"ruleId":"255","severity":1,"message":"309","line":20,"column":10,"nodeType":"257","messageId":"258","endLine":20,"endColumn":14},{"ruleId":"255","severity":1,"message":"310","line":48,"column":11,"nodeType":"257","messageId":"258","endLine":48,"endColumn":17},{"ruleId":"255","severity":1,"message":"292","line":1,"column":17,"nodeType":"257","messageId":"258","endLine":1,"endColumn":26},{"ruleId":"255","severity":1,"message":"307","line":11,"column":8,"nodeType":"257","messageId":"258","endLine":11,"endColumn":21},{"ruleId":"255","severity":1,"message":"308","line":13,"column":8,"nodeType":"257","messageId":"258","endLine":13,"endColumn":25},{"ruleId":"255","severity":1,"message":"311","line":15,"column":8,"nodeType":"257","messageId":"258","endLine":15,"endColumn":15},{"ruleId":"255","severity":1,"message":"309","line":16,"column":10,"nodeType":"257","messageId":"258","endLine":16,"endColumn":14},{"ruleId":"255","severity":1,"message":"310","line":66,"column":10,"nodeType":"257","messageId":"258","endLine":66,"endColumn":16},{"ruleId":"255","severity":1,"message":"312","line":68,"column":10,"nodeType":"257","messageId":"258","endLine":68,"endColumn":23},{"ruleId":"313","severity":1,"message":"314","line":245,"column":21,"nodeType":"315","messageId":"316","endLine":245,"endColumn":28},{"ruleId":"255","severity":1,"message":"317","line":23,"column":17,"nodeType":"257","messageId":"258","endLine":23,"endColumn":24},{"ruleId":"255","severity":1,"message":"301","line":25,"column":11,"nodeType":"257","messageId":"258","endLine":25,"endColumn":23},{"ruleId":"255","severity":1,"message":"318","line":5,"column":8,"nodeType":"257","messageId":"258","endLine":5,"endColumn":22},{"ruleId":"319","severity":1,"message":"320","line":20,"column":71,"nodeType":"321","endLine":20,"endColumn":158},{"ruleId":"255","severity":1,"message":"293","line":6,"column":10,"nodeType":"257","messageId":"258","endLine":6,"endColumn":13},{"ruleId":"255","severity":1,"message":"322","line":8,"column":34,"nodeType":"257","messageId":"258","endLine":8,"endColumn":38},{"ruleId":"255","severity":1,"message":"323","line":8,"column":51,"nodeType":"257","messageId":"258","endLine":8,"endColumn":57},{"ruleId":"255","severity":1,"message":"297","line":8,"column":65,"nodeType":"257","messageId":"258","endLine":8,"endColumn":70},{"ruleId":"255","severity":1,"message":"283","line":9,"column":10,"nodeType":"257","messageId":"258","endLine":9,"endColumn":22},{"ruleId":"255","severity":1,"message":"324","line":15,"column":10,"nodeType":"257","messageId":"258","endLine":15,"endColumn":18},{"ruleId":"255","severity":1,"message":"300","line":16,"column":10,"nodeType":"257","messageId":"258","endLine":16,"endColumn":17},{"ruleId":"255","severity":1,"message":"325","line":17,"column":10,"nodeType":"257","messageId":"258","endLine":17,"endColumn":16},{"ruleId":"255","severity":1,"message":"326","line":40,"column":9,"nodeType":"257","messageId":"258","endLine":40,"endColumn":27},{"ruleId":"285","severity":1,"message":"327","line":54,"column":7,"nodeType":"287","endLine":54,"endColumn":9,"suggestions":"328"},{"ruleId":"285","severity":1,"message":"329","line":130,"column":7,"nodeType":"287","endLine":130,"endColumn":21,"suggestions":"330"},{"ruleId":"285","severity":1,"message":"331","line":151,"column":7,"nodeType":"287","endLine":151,"endColumn":9,"suggestions":"332"},{"ruleId":"255","severity":1,"message":"333","line":1,"column":10,"nodeType":"257","messageId":"258","endLine":1,"endColumn":16},{"ruleId":"255","severity":1,"message":"256","line":1,"column":18,"nodeType":"257","messageId":"258","endLine":1,"endColumn":21},{"ruleId":"255","severity":1,"message":"297","line":1,"column":30,"nodeType":"257","messageId":"258","endLine":1,"endColumn":35},{"ruleId":"255","severity":1,"message":"334","line":1,"column":37,"nodeType":"257","messageId":"258","endLine":1,"endColumn":44},{"ruleId":"255","severity":1,"message":"335","line":4,"column":10,"nodeType":"257","messageId":"258","endLine":4,"endColumn":22},{"ruleId":"255","severity":1,"message":"336","line":6,"column":10,"nodeType":"257","messageId":"258","endLine":6,"endColumn":23},{"ruleId":"255","severity":1,"message":"318","line":7,"column":8,"nodeType":"257","messageId":"258","endLine":7,"endColumn":22},{"ruleId":"255","severity":1,"message":"337","line":9,"column":9,"nodeType":"257","messageId":"258","endLine":9,"endColumn":18},{"ruleId":"255","severity":1,"message":"338","line":4,"column":8,"nodeType":"257","messageId":"258","endLine":4,"endColumn":12},{"ruleId":"255","severity":1,"message":"339","line":4,"column":13,"nodeType":"257","messageId":"258","endLine":4,"endColumn":20},{"ruleId":"255","severity":1,"message":"340","line":5,"column":14,"nodeType":"257","messageId":"258","endLine":5,"endColumn":22},"no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'io' is defined but never used.","'Mychats' is defined but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"341","text":"342"},"'Navigate' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'ThemeProvider' is defined but never used.","'navigate' is assigned a value but never used.","'defaultTheme' is assigned a value but never used.","'show' is assigned a value but never used.","'setShow' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Copyright' is defined but never used.","'authenticate' is defined but never used.","'Link' is defined but never used.","'getOtherUser' is defined but never used.","'notification' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchChats'. Either include it or remove the dependency array.","ArrayExpression",["343"],"no-dupe-keys","Duplicate key 'width'.","ObjectExpression","'useEffect' is defined but never used.","'API' is defined but never used.","'getOtherUsers' is defined but never used.","'getNotification' is assigned a value but never used.","'useNavigate' is defined but never used.","'Stack' is defined but never used.","'ProfileModal' is defined but never used.","'CloseIcon' is defined but never used.","'GetUser' is defined but never used.","'selectedChat' is assigned a value but never used.","'setSelectedChat' is assigned a value but never used.","'otherUser' is assigned a value but never used.","'setOtherUser' is assigned a value but never used.","'isAuthenticated' is defined but never used.","'SxProps' is defined but never used.","'DialogActions' is defined but never used.","'DialogContentText' is defined but never used.","'blue' is defined but never used.","'search' is assigned a value but never used.","'AddIcon' is defined but never used.","'renameLoading' is assigned a value but never used.","no-array-constructor","The array literal notation [] is preferable.","CallExpression","preferLiteral","'setUser' is assigned a value but never used.","'ScrollableFeed' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Grid' is defined but never used.","'Button' is defined but never used.","'TrySharp' is defined but never used.","'useRef' is defined but never used.","'removeNotification' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["344"],"React Hook useEffect has missing dependencies: 'fetchAgain', 'fetchMessages', and 'setFetchAgain'. Either include them or remove the dependency array. If 'setFetchAgain' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["345"],"React Hook useEffect has missing dependencies: 'fetchAgain', 'fetchMessages', 'messages', 'notification', 'removeNotifications', 'setFetchAgain', 'setNotification', and 'user'. Either include them or remove the dependency array. If 'setFetchAgain' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["346"],"'Avatar' is defined but never used.","'Tooltip' is defined but never used.","'isSameSender' is defined but never used.","'isLastMessage' is defined but never used.","'Scrollbar' is defined but never used.","'file' is assigned a value but never used.","'setFile' is assigned a value but never used.","'setImage' is assigned a value but never used.",[773,780],"\r\n    .",{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},"Update the dependencies array to be: [fetchAgain, fetchChats]",{"range":"355","text":"356"},"Update the dependencies array to be: [user]",{"range":"357","text":"358"},"Update the dependencies array to be: [fetchAgain, fetchMessages, selectedChat, setFetchAgain]",{"range":"359","text":"360"},"Update the dependencies array to be: [fetchAgain, fetchMessages, messages, notification, removeNotifications, setFetchAgain, setNotification, user]",{"range":"361","text":"362"},[1193,1205],"[fetchAgain, fetchChats]",[1868,1870],"[user]",[4657,4671],"[fetchAgain, fetchMessages, selectedChat, setFetchAgain]",[5466,5468],"[fetchAgain, fetchMessages, messages, notification, removeNotifications, setFetchAgain, setNotification, user]"]