[{"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\index.js":"1","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\App.js":"3","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Router.js":"4","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Login.js":"5","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Signup.js":"6","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Helper\\APIcalls.js":"7","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\backend.js":"8","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Mychats.js":"9","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\main\\chatProvider.js":"10","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\miscella\\profile.js":"11","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\CreateGroupChat.js":"12","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\configuration\\logic.js":"13","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Helper.js":"14","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\test.js":"15"},{"size":552,"mtime":1685974982139,"results":"16","hashOfConfig":"17"},{"size":375,"mtime":1685974982141,"results":"18","hashOfConfig":"17"},{"size":265,"mtime":1686070883859,"results":"19","hashOfConfig":"17"},{"size":836,"mtime":1686080998374,"results":"20","hashOfConfig":"17"},{"size":4597,"mtime":1686070883862,"results":"21","hashOfConfig":"17"},{"size":5241,"mtime":1686070883864,"results":"22","hashOfConfig":"17"},{"size":1317,"mtime":1686070883860,"results":"23","hashOfConfig":"17"},{"size":95,"mtime":1686031127986,"results":"24","hashOfConfig":"17"},{"size":184,"mtime":1686070883867,"results":"25","hashOfConfig":"17"},{"size":3325,"mtime":1686071357636,"results":"26","hashOfConfig":"17"},{"size":1648,"mtime":1686081375545,"results":"27","hashOfConfig":"17"},{"size":3948,"mtime":1686070883864,"results":"28","hashOfConfig":"17"},{"size":195,"mtime":1685980472386,"results":"29","hashOfConfig":"17"},{"size":961,"mtime":1686070883865,"results":"30","hashOfConfig":"17"},{"size":257,"mtime":1686081299892,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},"1qpjxl0",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"35"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"35"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"35"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"58","usedDeprecatedRules":"35"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"35"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"35"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\index.js",[],[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\App.js",["85"],[],"import React from 'react'\r\nimport { Alert } from '@mui/material'\r\nimport Routers from \"./Router\"\r\nexport default function App() {\r\n  return (\r\n    <React.StrictMode>\r\n        <div> \r\n      <Routers/> \r\n      </div>\r\n      \r\n      </React.StrictMode>\r\n    \r\n  )\r\n}\r\n","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Router.js",[],[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Login.js",["86","87","88","89","90","91","92"],[],"import React from 'react'\r\nimport {useState} from \"react\"\r\nimport { useNavigate, Navigate } from 'react-router-dom';\r\nimport {login} from \"./Helper/APIcalls\"\r\nimport { authenticate } from './Helper/APIcalls';\r\n// --------------------------------------------------------\r\n// Material UI\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport TextField from '@mui/material/TextField';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Link from '@mui/material/Link';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport { Snackbar,Alert } from '@mui/material';\r\n\r\n// --------------------------------------------------------\r\nexport default function Login() {\r\n    const [show, setShow] = useState(false);\r\n   \r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [success, setSuccess] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    const defaultTheme = createTheme();    \r\n      const handleChange = name => event => {\r\n        \r\n        if(name===\"email\"){\r\n            setEmail(event.target.value);\r\n        }\r\n        else {\r\n            setPassword(event.target.value)\r\n        }\r\n      }\r\n\r\n      const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(!email || !password){\r\n          setShow(true);\r\n          \r\n        }\r\n        else{  \r\n            login({email,password}).then(data => {\r\n              console.log(data);\r\n               authenticate(data, ()=>{\r\n                setSuccess(true);\r\n                setEmail(\"\");\r\n                setPassword(\"\");\r\n               })\r\n                \r\n            }\r\n            )\r\n        }\r\n       \r\n      };\r\n\r\n      const handleClose = event => {\r\n        setShow(false);\r\n        setSuccess(false);\r\n      }\r\n    \r\n \r\n\r\n\r\n  return (\r\n    <div >\r\n      <Snackbar open={show} autoHideDuration={4000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\" variant='filled' sx={{ width: '100%' }}>\r\n          Please fill all the fields!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar open={success} autoHideDuration={4000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\" variant='filled' sx={{ width: '100%' }}>\r\n          Logined Successfully!!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Avatar sx={{ m: 1, bgcolor: 'blue' }}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n           Sign In\r\n          </Typography>\r\n          <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  value={email}\r\n                  onChange={handleChange(\"email\")}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\" \r\n                  value={password}\r\n                  onChange={handleChange(\"password\")}\r\n                  autoComplete=\"new-password\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={[{ mt: 3, mb: 2, bgcolor:\"blue\" },{\r\n                '&:hover':{\r\n                    bgcolor: \"#2827CC\"\r\n                }\r\n              }]\r\n            }\r\n            onClick={handleSubmit}\r\n            >\r\n              Login\r\n            </Button>\r\n\r\n          </Box>\r\n        </Box>\r\n    \r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Signup.js",["93","94","95","96","97","98"],[],"import React from 'react'\r\nimport {useState} from \"react\"\r\nimport { useNavigate, Navigate } from 'react-router-dom';\r\nimport {signup} from \"./Helper/APIcalls\"\r\n\r\n// --------------------------------------------------------\r\n// Material UI\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport TextField from '@mui/material/TextField';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Link from '@mui/material/Link';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport { Snackbar,Alert } from '@mui/material';\r\n\r\n// --------------------------------------------------------\r\nexport default function Signup() {\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [name , setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [success, setSuccess] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    const defaultTheme = createTheme();    \r\n      const handleChange = name => event => {\r\n        if(name===\"name\"){\r\n            setName(event.target.value);\r\n        }\r\n        else if(name===\"email\"){\r\n            setEmail(event.target.value);\r\n        }\r\n        else {\r\n            setPassword(event.target.value)\r\n        }\r\n      }\r\n\r\n      const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(!name || !email || !password){\r\n          setShow(true);\r\n        }\r\n        else{\r\n          signup({name,email,password}).then(data => {\r\n            setSuccess(true);\r\n            setName(\"\");\r\n            setEmail(\"\");\r\n            setPassword(\"\");\r\n            console.log(data);\r\n        }\r\n        )\r\n        }\r\n      \r\n      };\r\n\r\n      const handleClose = event => {\r\n        setShow(false);\r\n        setSuccess(false);\r\n      }\r\n    \r\n \r\n\r\n\r\n  return (\r\n    <div >\r\n      <Snackbar open={show} autoHideDuration={4000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\" variant='filled' sx={{ width: '100%' }}>\r\n          Please fill all the fields!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar open={success} autoHideDuration={4000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\" variant='filled' sx={{ width: '100%' }}>\r\n          Signed Up Successfully!!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Avatar sx={{ m: 1, bgcolor: 'blue' }}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign up\r\n          </Typography>\r\n          <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  value={name}\r\n                  name=\"Name\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"Name\"\r\n                  label=\"Name\"\r\n                  autoFocus\r\n                  onChange={handleChange(\"name\")}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  value={email}\r\n                  onChange={handleChange(\"email\")}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\" \r\n                  value={password}\r\n                  onChange={handleChange(\"password\")}\r\n                  autoComplete=\"new-password\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n             \r\n              sx={[{ mt: 3, mb: 2, bgcolor:\"blue\" },{\r\n                '&:hover':{\r\n                    bgcolor: \"#2827CC\"\r\n                }\r\n              }]}\r\n            onClick={handleSubmit}\r\n            >\r\n              Sign Up\r\n            </Button>\r\n            <Grid container justifyContent=\"flex-end\">\r\n              <Grid item>\r\n                <Link href=\"http://localhost:3000/login\" variant=\"body2\">\r\n                  Already have an account? Sign in\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n    \r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Helper\\APIcalls.js",["99"],[],"import {API} from \"../../../backend\"\r\n\r\n\r\nexport const login = (user) => {\r\n    \r\n    return fetch(`${API}/login`,{\r\n        method:\"POST\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(user)\r\n    })\r\n    .then(resp => {\r\n        return resp.json();\r\n    })\r\n    .catch(err => {return err })\r\n}\r\n\r\nexport const signup = (user) => {\r\n    console.log(API);\r\n    return fetch(`${API}/signup`,{\r\n        method:\"POST\",\r\n        headers:{\r\n            Accept: \"application/json\",\r\n            \"Content-Type\":\"application/json\"\r\n        },\r\n        body: JSON.stringify(user)\r\n\r\n    }).then((resp,err)=>{\r\n        if(err){\r\n            return ;\r\n        }\r\n        else return resp.json();\r\n    }).\r\n    catch(err=>{\r\n        console.log(err);\r\n        return\r\n    })\r\n}\r\n\r\nexport const authenticate = (data, next) =>{\r\n    if(typeof window !== \"undefined\"){\r\n        localStorage.setItem(\"jwt\",JSON.stringify(data))\r\n\r\n        next();\r\n    }\r\n}\r\n\r\nexport const isAuthenticated = () => {\r\n    if(typeof window == \"undefined\"){\r\n        return false\r\n    }\r\n    if(localStorage.getItem(\"jwt\")){\r\n        \r\n        return JSON.parse(localStorage.getItem(\"jwt\"));\r\n        \r\n    }\r\n    else{\r\n        return false    }\r\n}","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\backend.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Mychats.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\main\\chatProvider.js",["100","101","102"],[],"import { createContext, useContext, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\nimport { API } from \"../backend\";\r\nimport { getOtherUsers } from '../configuration/logic';\r\nconst ChatContext=createContext(\"\");\r\nconst ChatProvider=({children})=>{\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const [chat,setChat]=useState();\r\n    const [error,setError]=useState();\r\n    const [user,setUser]=useState();\r\n    const [selectedChat,setSelectedChat]=useState();\r\n    const [notification,setNotification]=useState();\r\n\r\n    const getNotification=(userId)=>{\r\n        \r\n        var array=[];\r\n        \r\n        const {data}=fetch(`${API}/getnotification/${userId}`,{\r\n            method:\"POST\",\r\n            headers:{\r\n                Authorization: `Bearer ${user.token}` \r\n            },\r\n            body:{\r\n               array \r\n            }\r\n        });\r\n        data.notification.forEach((ele)=>{\r\n            array.push(ele.message);\r\n        });\r\n        setNotification(array);\r\n        if(!user){\r\n    return;\r\n        }return {data}\r\n        .then(res=>{\r\n            return res.json()\r\n        })\r\n        .catch(err=>console.log({\r\n            title: \"Error fetching the Notifications\",\r\n            description: error.message,\r\n            status: \"error\",\r\n            isClosable: true,\r\n            position: \"top\",\r\n        }))\r\n       };\r\n   const removeNotification=(chatId)=>{\r\n    //need to change from backend\r\n   \r\n    //improve backend route in user router\r\n    const {data}=fetch(`${API}/deletenotification/`,\r\n\r\n      {\r\n        method:\"PUT\",\r\n        headers:{\r\n            Authorization: `Bearer ${user.token}` \r\n        },\r\n        body:{\r\n            userId: user._id,\r\n            chatId: chatId,\r\n            \r\n          },\r\n    });\r\n    var array=[];\r\n    data.notification.forEach((ele)=>{\r\n        array.push(ele.message);\r\n    });\r\n    setNotification(array);\r\n    if(!user){\r\nreturn;\r\n    }return {data}\r\n    .then(res=>{\r\n        return res.json()\r\n    })\r\n    .catch(err=>console.log({\r\n        title: \"Error deleting the Notifications\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n    }))\r\n   };\r\n   \r\n   const sendNotification=(data,userId)=>{\r\n    const recievers=getOtherUsers(user,selectedChat.users);\r\n    \r\n    for(const receiver of recievers){\r\n        //fetching api of send message\r\n        fetch(`${API}/message/send/${userId}`,\r\n        {\r\n            method:\"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${user.token}`,\r\n            },\r\n            body:{\r\n                userId: receiver._id,\r\n                messageId: data._id,\r\n                chatId: data.chat._id,\r\n              },\r\n        })\r\n    }\r\n   }\r\n\r\n   \r\n\r\n   return (\r\n    <ChatContext.Provider\r\n    value={{\r\n        user,setUser,\r\n        selectedChat,setSelectedChat,\r\n        chat,setChat,\r\n        error,setError,\r\n\r\n        notification,setNotification,\r\n        removeNotification,\r\n        sendNotification,\r\n    }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n   );\r\n};\r\nexport const ChatState=()=>{\r\n    return useContext(ChatContext);\r\n}\r\nexport default ChatProvider","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\miscella\\profile.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\CreateGroupChat.js",["103","104","105","106","107","108","109","110","111"],[],"import * as React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { ChatState } from '../main/chatProvider';\r\nimport { CreateGroup, SearchUsers } from './Helper';\r\nimport { isAuthenticated } from './Auth/Helper/APIcalls';\r\n// ----------------------------------------------\r\n// Material UI\r\nimport { Typography, Grid, Snackbar } from '@mui/material';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport AddIcon from '@mui/icons-material/Add';\r\n// ------------------------------------------------\r\n\r\n\r\n\r\nexport default function CreateGroupChat() {\r\n// ----------------------------------------------\r\n// dialog box\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n//   -----------------------------------------------------\r\n\r\n\r\n\r\n// -------------------------------------------------------\r\n// states\r\n   const [groupChatName, setGroupChatName] = useState();\r\n   const [selectedUsers, setSelectedUsers] = useState([]);\r\n   const [search, setSearch] = useState();\r\n   const [searchResults, setSearchResults] = useState([]);\r\n   const [loading, setLoading] = useState(false);\r\n\r\n   const jwt=isAuthenticated();\r\n    const {user,chats, setChats} = ChatState();\r\n \r\n   \r\n  \r\n  \r\n   \r\n   \r\n   \r\n\r\n// -------------------------------------------------------\r\n\r\n\r\n// -------------------------------------------------------\r\n// handle functions\r\n\r\nconst handleSearch = (query) => {\r\n    setSearch(query); \r\n    if(!query){\r\n        return;\r\n    } \r\n\r\n    try{\r\n        SearchUsers(user,jwt,query).then((response,err)=>{\r\n            setSearchResults(response)\r\n            console.log(searchResults);\r\n        })\r\n    }catch(err){\r\n        console.log(err);\r\n    }\r\n} \r\n\r\nconst handleSubmit = () =>{\r\n    if(!groupChatName || !selectedUsers){\r\n        return;\r\n    }\r\n    try{\r\n        CreateGroup(user,selectedUsers,groupChatName).then((response,err)=>{\r\n            console.log(response);\r\n            setChats(response);\r\n        })\r\n    }\r\n    catch(err){\r\n        console.log(err);\r\n        return ;\r\n    }\r\n}\r\n\r\n// -------------------------------------------------------\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" onClick={handleClickOpen}>\r\n        Create Group <AddIcon sx={{ fontSize: 22, mb : \"3px\", ml : \"5px\" }}/>\r\n      </Button>\r\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"responsive-dialog-title\">\r\n        <DialogTitle sx={{fontSize: \"30px\"}}>\r\n        <Typography variant=\"h4\" align=\"center\">\r\n    Create Group Chat\r\n</Typography>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n         \r\n        <Grid item xs={12} sx={{mb:\"10px\" , mt: \"10px\"}}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"group name\"\r\n                  label=\"Group Name\"\r\n                  value={groupChatName}\r\n                  onChange={(event)=>{ setGroupChatName(event.target.value)}}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sx={{mb:\"10px\" , mt: \"20px\"}}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"add users\"\r\n                  label=\"Add Users\"\r\n                  onChange={(e)=>handleSearch(e.target.value) }\r\n                />\r\n              </Grid>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose}>Cancel</Button>\r\n          <Button onClick={handleClose}>Subscribe</Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\configuration\\logic.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Helper.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\test.js",[],[],{"ruleId":"112","severity":1,"message":"113","line":2,"column":10,"nodeType":"114","messageId":"115","endLine":2,"endColumn":15},{"ruleId":"112","severity":1,"message":"116","line":3,"column":23,"nodeType":"114","messageId":"115","endLine":3,"endColumn":31},{"ruleId":"112","severity":1,"message":"117","line":12,"column":8,"nodeType":"114","messageId":"115","endLine":12,"endColumn":24},{"ruleId":"112","severity":1,"message":"118","line":13,"column":8,"nodeType":"114","messageId":"115","endLine":13,"endColumn":16},{"ruleId":"112","severity":1,"message":"119","line":14,"column":8,"nodeType":"114","messageId":"115","endLine":14,"endColumn":12},{"ruleId":"112","severity":1,"message":"120","line":20,"column":23,"nodeType":"114","messageId":"115","endLine":20,"endColumn":36},{"ruleId":"112","severity":1,"message":"121","line":30,"column":11,"nodeType":"114","messageId":"115","endLine":30,"endColumn":19},{"ruleId":"112","severity":1,"message":"122","line":32,"column":11,"nodeType":"114","messageId":"115","endLine":32,"endColumn":23},{"ruleId":"112","severity":1,"message":"116","line":3,"column":23,"nodeType":"114","messageId":"115","endLine":3,"endColumn":31},{"ruleId":"112","severity":1,"message":"117","line":12,"column":8,"nodeType":"114","messageId":"115","endLine":12,"endColumn":24},{"ruleId":"112","severity":1,"message":"118","line":13,"column":8,"nodeType":"114","messageId":"115","endLine":13,"endColumn":16},{"ruleId":"112","severity":1,"message":"120","line":20,"column":23,"nodeType":"114","messageId":"115","endLine":20,"endColumn":36},{"ruleId":"112","severity":1,"message":"121","line":31,"column":11,"nodeType":"114","messageId":"115","endLine":31,"endColumn":19},{"ruleId":"112","severity":1,"message":"122","line":33,"column":11,"nodeType":"114","messageId":"115","endLine":33,"endColumn":23},{"ruleId":"123","severity":1,"message":"124","line":35,"column":7,"nodeType":"125","messageId":"126","endLine":35,"endColumn":8,"fix":"127"},{"ruleId":"112","severity":1,"message":"128","line":3,"column":10,"nodeType":"114","messageId":"115","endLine":3,"endColumn":19},{"ruleId":"112","severity":1,"message":"121","line":9,"column":11,"nodeType":"114","messageId":"115","endLine":9,"endColumn":19},{"ruleId":"112","severity":1,"message":"129","line":17,"column":11,"nodeType":"114","messageId":"115","endLine":17,"endColumn":26},{"ruleId":"112","severity":1,"message":"128","line":2,"column":20,"nodeType":"114","messageId":"115","endLine":2,"endColumn":29},{"ruleId":"112","severity":1,"message":"130","line":8,"column":28,"nodeType":"114","messageId":"115","endLine":8,"endColumn":36},{"ruleId":"112","severity":1,"message":"131","line":14,"column":8,"nodeType":"114","messageId":"115","endLine":14,"endColumn":25},{"ruleId":"112","severity":1,"message":"132","line":40,"column":26,"nodeType":"114","messageId":"115","endLine":40,"endColumn":42},{"ruleId":"112","severity":1,"message":"133","line":41,"column":11,"nodeType":"114","messageId":"115","endLine":41,"endColumn":17},{"ruleId":"112","severity":1,"message":"134","line":43,"column":11,"nodeType":"114","messageId":"115","endLine":43,"endColumn":18},{"ruleId":"112","severity":1,"message":"135","line":43,"column":20,"nodeType":"114","messageId":"115","endLine":43,"endColumn":30},{"ruleId":"112","severity":1,"message":"136","line":46,"column":17,"nodeType":"114","messageId":"115","endLine":46,"endColumn":22},{"ruleId":"112","severity":1,"message":"137","line":77,"column":7,"nodeType":"114","messageId":"115","endLine":77,"endColumn":19},"no-unused-vars","'Alert' is defined but never used.","Identifier","unusedVar","'Navigate' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Link' is defined but never used.","'ThemeProvider' is defined but never used.","'navigate' is assigned a value but never used.","'defaultTheme' is assigned a value but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"138","text":"139"},"'useEffect' is defined but never used.","'getNotification' is assigned a value but never used.","'Snackbar' is defined but never used.","'DialogContentText' is defined but never used.","'setSelectedUsers' is assigned a value but never used.","'search' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","'chats' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.",[796,803],"\r\n    ."]