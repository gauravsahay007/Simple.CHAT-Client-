[{"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\index.js":"1","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\App.js":"2","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Router.js":"4","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\main\\chatProvider.js":"5","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\test.js":"6","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Mychats.js":"7","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Signup.js":"8","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Login.js":"9","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\backend.js":"10","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\configuration\\logic.js":"11","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\CreateGroupChat.js":"12","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\miscella\\profile.js":"13","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Helper\\APIcalls.js":"14","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Helper.js":"15","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Avatar\\UserBadgeItem.js":"16","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Avatar\\UserListItem.js":"17","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\miscella\\SideBar.js":"18","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\chatloading.js":"19"},{"size":552,"mtime":1685974982139,"results":"20","hashOfConfig":"21"},{"size":316,"mtime":1686116908060,"results":"22","hashOfConfig":"21"},{"size":375,"mtime":1685974982141,"results":"23","hashOfConfig":"21"},{"size":829,"mtime":1686127722659,"results":"24","hashOfConfig":"21"},{"size":3470,"mtime":1686116908082,"results":"25","hashOfConfig":"21"},{"size":327,"mtime":1686138831847,"results":"26","hashOfConfig":"21"},{"size":184,"mtime":1686070883867,"results":"27","hashOfConfig":"21"},{"size":5241,"mtime":1686070883864,"results":"28","hashOfConfig":"21"},{"size":4770,"mtime":1686157593315,"results":"29","hashOfConfig":"21"},{"size":95,"mtime":1686031127986,"results":"30","hashOfConfig":"21"},{"size":195,"mtime":1685980472386,"results":"31","hashOfConfig":"21"},{"size":6276,"mtime":1686127423257,"results":"32","hashOfConfig":"21"},{"size":1745,"mtime":1686157593317,"results":"33","hashOfConfig":"21"},{"size":1294,"mtime":1686116908064,"results":"34","hashOfConfig":"21"},{"size":996,"mtime":1686116908076,"results":"35","hashOfConfig":"21"},{"size":499,"mtime":1686116908070,"results":"36","hashOfConfig":"21"},{"size":677,"mtime":1686116908072,"results":"37","hashOfConfig":"21"},{"size":8497,"mtime":1686157458737,"results":"38","hashOfConfig":"21"},{"size":543,"mtime":1686138468136,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"1qpjxl0",{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"43"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"43"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"43"},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"43"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"43"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"88","usedDeprecatedRules":"43"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"43"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"43"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\index.js",[],[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\App.js",["106","107"],[],"import React from 'react'\r\nimport { Alert } from '@mui/material'\r\nimport Routers from \"./Router\"\r\nimport ChatProvider from './main/chatProvider'\r\nexport default function App() {\r\n  return (\r\n    <React.StrictMode>\r\n       \r\n        <Routers/> \r\n      \r\n     \r\n     \r\n      \r\n      </React.StrictMode>\r\n    \r\n  )\r\n}\r\n","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Router.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\main\\chatProvider.js",["108"],[],"import { createContext, useContext, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\nimport { API } from \"../backend\";\r\nimport { getOtherUsers } from '../configuration/logic';\r\nconst ChatContext=createContext(\"\");\r\nconst ChatProvider=({children})=>{\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const [chat,setChat]=useState();\r\n    const [error,setError]=useState();\r\n    const [user,setUser]=useState();\r\n    const [selectedChat,setSelectedChat]=useState();\r\n    const [notification,setNotification]=useState();\r\n\r\n    useEffect(()=>{\r\n        const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n        setUser(userInfo);\r\n    },[navigate])\r\n\r\n    const getNotification=(userId)=>{\r\n        \r\n        var array=[];\r\n        \r\n        const {data}=fetch(`${API}/getnotification/${userId}`,{\r\n            method:\"POST\",\r\n            headers:{\r\n                Authorization: `Bearer ${user.token}` \r\n            },\r\n            body:{\r\n               array \r\n            }\r\n        });\r\n        data.notification.forEach((ele)=>{\r\n            array.push(ele.message);\r\n        });\r\n        setNotification(array);\r\n        if(!user){\r\n    return;\r\n        }return {data}\r\n        .then(res=>{\r\n            return res.json()\r\n        })\r\n        .catch(err=>console.log({\r\n            title: \"Error fetching the Notifications\",\r\n            description: error.message,\r\n            status: \"error\",\r\n            isClosable: true,\r\n            position: \"top\",\r\n        }))\r\n       };\r\n   const removeNotification=(chatId)=>{\r\n    //need to change from backend\r\n   \r\n    //improve backend route in user router\r\n    const {data}=fetch(`${API}/deletenotification/`,\r\n\r\n      {\r\n        method:\"PUT\",\r\n        headers:{\r\n            Authorization: `Bearer ${user.token}` \r\n        },\r\n        body:{\r\n            userId: user._id,\r\n            chatId: chatId,\r\n            \r\n          },\r\n    });\r\n    var array=[];\r\n    data.notification.forEach((ele)=>{\r\n        array.push(ele.message);\r\n    });\r\n    setNotification(array);\r\n    if(!user){\r\nreturn;\r\n    }return {data}\r\n    .then(res=>{\r\n        return res.json()\r\n    })\r\n    .catch(err=>console.log({\r\n        title: \"Error deleting the Notifications\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n    }))\r\n   };\r\n   \r\n   const sendNotification=(data,userId)=>{\r\n    const recievers=getOtherUsers(user,selectedChat.users);\r\n    \r\n    for(const receiver of recievers){\r\n        //fetching api of send message\r\n        fetch(`${API}/message/send/${userId}`,\r\n        {\r\n            method:\"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: `Bearer ${user.token}`,\r\n            },\r\n            body:{\r\n                userId: receiver._id,\r\n                messageId: data._id,\r\n                chatId: data.chat._id,\r\n              },\r\n        })\r\n    }\r\n   }\r\n\r\n   \r\n   \r\n   return (\r\n    <ChatContext.Provider\r\n    value={{\r\n        user,setUser,\r\n        selectedChat,setSelectedChat,\r\n        chat,setChat,\r\n        error,setError,\r\n\r\n        notification,setNotification,\r\n        removeNotification,\r\n        sendNotification,\r\n    }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n   );\r\n};\r\nexport const ChatState=()=>{\r\n    return useContext(ChatContext);\r\n}\r\nexport default ChatProvider","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\test.js",["109"],[],"import React from \"react\";\r\nimport ProfileModal from \"./Components/miscella/profile\";\r\nimport SideBar from \"./Components/miscella/SideBar\";\r\nexport default function Test(){\r\n    \r\n\r\n        return (\r\n            <div> \r\n                <SideBar/>\r\n                {/* <ProfileModal/> */}\r\n            </div>\r\n          )\r\n  \r\n}","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Mychats.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Signup.js",["110","111","112","113","114","115"],[],"import React from 'react'\r\nimport {useState} from \"react\"\r\nimport { useNavigate, Navigate } from 'react-router-dom';\r\nimport {signup} from \"./Helper/APIcalls\"\r\n\r\n// --------------------------------------------------------\r\n// Material UI\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport TextField from '@mui/material/TextField';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Link from '@mui/material/Link';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport { Snackbar,Alert } from '@mui/material';\r\n\r\n// --------------------------------------------------------\r\nexport default function Signup() {\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [name , setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [success, setSuccess] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    const defaultTheme = createTheme();    \r\n      const handleChange = name => event => {\r\n        if(name===\"name\"){\r\n            setName(event.target.value);\r\n        }\r\n        else if(name===\"email\"){\r\n            setEmail(event.target.value);\r\n        }\r\n        else {\r\n            setPassword(event.target.value)\r\n        }\r\n      }\r\n\r\n      const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(!name || !email || !password){\r\n          setShow(true);\r\n        }\r\n        else{\r\n          signup({name,email,password}).then(data => {\r\n            setSuccess(true);\r\n            setName(\"\");\r\n            setEmail(\"\");\r\n            setPassword(\"\");\r\n            console.log(data);\r\n        }\r\n        )\r\n        }\r\n      \r\n      };\r\n\r\n      const handleClose = event => {\r\n        setShow(false);\r\n        setSuccess(false);\r\n      }\r\n    \r\n \r\n\r\n\r\n  return (\r\n    <div >\r\n      <Snackbar open={show} autoHideDuration={4000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\" variant='filled' sx={{ width: '100%' }}>\r\n          Please fill all the fields!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar open={success} autoHideDuration={4000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\" variant='filled' sx={{ width: '100%' }}>\r\n          Signed Up Successfully!!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Avatar sx={{ m: 1, bgcolor: 'blue' }}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign up\r\n          </Typography>\r\n          <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  value={name}\r\n                  name=\"Name\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"Name\"\r\n                  label=\"Name\"\r\n                  autoFocus\r\n                  onChange={handleChange(\"name\")}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  value={email}\r\n                  onChange={handleChange(\"email\")}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\" \r\n                  value={password}\r\n                  onChange={handleChange(\"password\")}\r\n                  autoComplete=\"new-password\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n             \r\n              sx={[{ mt: 3, mb: 2, bgcolor:\"blue\" },{\r\n                '&:hover':{\r\n                    bgcolor: \"#2827CC\"\r\n                }\r\n              }]}\r\n            onClick={handleSubmit}\r\n            >\r\n              Sign Up\r\n            </Button>\r\n            <Grid container justifyContent=\"flex-end\">\r\n              <Grid item>\r\n                <Link href=\"http://localhost:3000/login\" variant=\"body2\">\r\n                  Already have an account? Sign in\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n    \r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Login.js",["116"],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\backend.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\configuration\\logic.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\CreateGroupChat.js",["117","118","119","120","121","122","123","124","125"],[],"import * as React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { ChatState } from '../main/chatProvider';\r\nimport { CreateGroup, SearchUsers } from './Helper';\r\nimport { isAuthenticated } from './Auth/Helper/APIcalls';\r\nimport UserListItem from './Avatar/UserListItem';\r\n// ----------------------------------------------\r\n// Material UI\r\nimport { Typography, Grid, Snackbar, CircularProgress, Stack, Alert, Box} from '@mui/material';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport { blue } from '@mui/material/colors';\r\nimport UserBadgeItem from './Avatar/UserBadgeItem';\r\n// ------------------------------------------------\r\n\r\n\r\n\r\nexport default function CreateGroupChat() {\r\n// ----------------------------------------------\r\n// dialog box\r\n  const [open, setOpen] = React.useState(false);\r\n  const [error,setError]=useState(false);\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    \r\n    \r\n  };\r\n//   -----------------------------------------------------\r\n\r\n\r\n\r\n// -------------------------------------------------------\r\n// states\r\n   const [groupChatName, setGroupChatName] = useState();\r\n   const [selectedUsers, setSelectedUsers] = useState([]);\r\n   const [search, setSearch] = useState();\r\n   const [searchResults, setSearchResults] = useState([]);\r\n   const [loading, setLoading] = useState(false);\r\nconst [success,setSuccess]=useState(false);\r\n   const jwt=isAuthenticated();\r\n   const user = JSON.parse(localStorage.getItem(\"userInfo\"))\r\n console.log(user);\r\n   \r\n//   console.log(user);\r\n  \r\n   \r\n   \r\n   \r\n\r\n// -------------------------------------------------------\r\n\r\n\r\n// -------------------------------------------------------\r\n// handle functions\r\n\r\nconst handleSearch = (query) => {\r\n    setSearch(query); \r\n    if(!query){\r\n        return;\r\n    } \r\n\r\n    try{\r\n        setLoading(true);\r\n        SearchUsers(user,query).then((response,err)=>{\r\n            setSearchResults(response)\r\n          setSuccess(false);\r\n           setInterval(()=>{\r\n            setLoading(false);\r\n           },1000)\r\n    \r\n        })\r\n    }catch(err){\r\n        \r\n        console.log(err);\r\n        return;\r\n    }\r\n} \r\n\r\nconst handleSubmit = () =>{\r\n    if(!groupChatName || !selectedUsers){\r\n        return;\r\n    }\r\n    try{\r\n        CreateGroup(user,selectedUsers,groupChatName).then((response,err)=>{\r\n            console.log(response);\r\n            setSuccess(true);\r\n        })\r\n    }\r\n    catch(err){\r\n        console.log(err);\r\n        return ;\r\n    }\r\n}\r\n\r\nconst handleGroup = (userToAdd) => {\r\n    if(selectedUsers.includes(userToAdd)){\r\n        <Snackbar open={open} onClose={handleClose} autoHideDuration={4000}>\r\n        <Alert  severity=\"error\" variant='filled' sx={{ width: '100%' }}>\r\n          User Already Added!!\r\n        </Alert>\r\n      </Snackbar>\r\n      return ;\r\n      \r\n\r\n    }\r\n    else  setSelectedUsers([...selectedUsers, userToAdd]);\r\n    \r\n}\r\n\r\nconst handleDelete=(userToDelete)=>{\r\n    setSelectedUsers(\r\n        selectedUsers.filter((sel) => sel._id !== userToDelete._id)\r\n      );\r\n}\r\n// -------------------------------------------------------\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" onClick={handleClickOpen}>\r\n        Create Group <AddIcon sx={{ fontSize: 22, mb : \"3px\", ml : \"5px\" }}/>\r\n      </Button>\r\n      <Dialog open={open} onClose={handleClose} aria-labelledby=\"responsive-dialog-title\" >\r\n        <DialogTitle sx={{fontSize: \"30px\"}}>\r\n        <Typography variant=\"h5\" align=\"center\">\r\n    Create Group Chat\r\n</Typography>\r\n        <Snackbar open={success} autoHideDuration={4000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\" variant='filled' sx={{ width: '100%' }}>\r\n          Chat Created Successfully 🥳!!\r\n        </Alert>\r\n      </Snackbar>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n         \r\n        <Grid item xs={12} sx={{mb:\"10px\" , mt: \"10px\"}}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"group name\"\r\n                  label=\"Group Name\"\r\n                  value={groupChatName}\r\n                  onChange={(event)=>{ setGroupChatName(event.target.value)}}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12} sx={{mb:\"10px\" , mt: \"10px\"}}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"add users\"\r\n                  label=\"Add Users\"\r\n                  onChange={(e)=>handleSearch(e.target.value) }\r\n                />\r\n\r\n                <Box sx={{display:\"flex\", fontSize:\"10px\", gap:\"5px\"}}>\r\n                    {selectedUsers.map((u)=>(\r\n                        <UserBadgeItem key={u._id} user={u} handlerfunction={()=>{handleDelete(u)}}/>\r\n                    ))}\r\n                </Box>\r\n\r\n            <Stack direction=\"row\" spacing={10}>  \r\n                <Button variant='filled'  sx={[{bgcolor:\"blue\", color:\"white\", mt:\"5px\"},{\r\n                                '&:hover':{\r\n                                    bgcolor: \"#2827CC\"\r\n                                }\r\n                            }]\r\n                        } onClick={handleSubmit}>Create Chat</Button>\r\n    {loading? (\r\n        <div> <CircularProgress size=\"25px\" sx={{mt:\"12px\"}}/></div>\r\n                   \r\n                  ):( <div></div> )} \r\n                    \r\n            </Stack> \r\n\r\n            {loading? (\r\n        <div> </div> \r\n                  ):(\r\n                    searchResults\r\n                    ?.slice(0, 4)\r\n                    .map((user) => (\r\n                      <UserListItem key={user._id} user={user} handleFunction={()=>handleGroup(user)}/>\r\n                     \r\n                    )))}\r\n           \r\n              </Grid>\r\n        </DialogContent>\r\n        \r\n      </Dialog>\r\n\r\n          \r\n\r\n    </div>\r\n  );\r\n}","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\miscella\\profile.js",["126","127","128","129"],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Helper\\APIcalls.js",["130"],[],"import {API} from \"../../../backend\"\r\n\r\n\r\nexport const login = (user) => {\r\n    \r\n    return fetch(`${API}/login`,{\r\n        method:\"POST\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(user)\r\n    })\r\n    .then(resp => {\r\n        return resp.json();\r\n    })\r\n    .catch(err => {return err })\r\n}\r\n\r\nexport const signup = (user) => {\r\n    return fetch(`${API}/signup`,{\r\n        method:\"POST\",\r\n        headers:{\r\n            Accept: \"application/json\",\r\n            \"Content-Type\":\"application/json\"\r\n        },\r\n        body: JSON.stringify(user)\r\n\r\n    }).then((resp,err)=>{\r\n        if(err){\r\n            return ;\r\n        }\r\n        else return resp.json();\r\n    }).\r\n    catch(err=>{\r\n        console.log(err);\r\n        return\r\n    })\r\n}\r\n\r\nexport const authenticate = (data, next) =>{\r\n    if(typeof window !== \"undefined\"){\r\n        localStorage.setItem(\"jwt\",JSON.stringify(data))\r\n\r\n        next();\r\n    }\r\n}\r\n\r\nexport const isAuthenticated = () => {\r\n    if(typeof window == \"undefined\"){\r\n        return false\r\n    }\r\n    if(localStorage.getItem(\"jwt\")){\r\n        \r\n        return JSON.parse(localStorage.getItem(\"jwt\"));\r\n        \r\n    }\r\n    else{\r\n        return false    }\r\n}","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Helper.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Avatar\\UserBadgeItem.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Avatar\\UserListItem.js",["131"],[],"import React from 'react'\r\nimport { Box, Avatar, Stack, Typography } from '@mui/material'\r\nexport default function UserListItem({user, handleFunction}) {\r\n\r\n  return (\r\n    <Box onClick={handleFunction} sx={[{bgcolor:\"#E8E8E8\",mt:\"5px\",mb:\"5px\",borderRadius:1 , p:\"5px\", display:\"flex\" , gap:\"20px\",cursor:\"pointer\"},{\r\n        '&:hover':{\r\n            bgcolor:\"#2827CC\"\r\n        }\r\n    }]}>\r\n        <Avatar sx={{  width: 38, height: 38, border:\"1px solid black\" }} src={user.pic}/>\r\n    <Box sx={{display:\"flex\", flexDirection:\"column\"}}>\r\n        <Typography>{user.name}</Typography>\r\n        <Typography  >{user.email}</Typography>\r\n    </Box>\r\n      \r\n    </Box>\r\n  )\r\n}\r\n","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\miscella\\SideBar.js",["132","133","134","135"],[],"import React,{useState} from \"react\";\r\nimport { API } from \"../../backend\";\r\nimport {\r\n    Drawer,\r\n    Divider,\r\n    IconButton,\r\n    Box ,\r\n    \r\n     \r\n   InputBase,\r\n    ListItem,\r\n    \r\n    Button,\r\n    Typography,\r\n    CircularProgress,\r\n    Tooltip,\r\n    Menu,\r\n    MenuItem,\r\n    MenuList,\r\n   \r\n   \r\n    \r\n} from '@mui/material';\r\nimport {Alert} from \"@mui/material\";\r\nimport {Avatar} from \"@mui/material\";\r\nimport {Snackbar} from \"@mui/material\";\r\nimport { ChatState } from \"../../main/chatProvider\";\r\nimport { Notifications ,Effect, ExpandMore} from \"@mui/icons-material\";\r\nimport { Badge } from \"@mui/icons-material\";\r\nimport ProfileModal from \"./profile\";\r\nimport { Search } from \"@mui/icons-material\";\r\nimport ChatLoading from \"../chatloading\";\r\nimport { getOtherUsers } from \"../../configuration/logic\";\r\nimport { useNavigate } from 'react-router-dom';\r\nexport default function SideBar(){\r\n    const [open, setOpen] = React.useState(false);\r\n    \r\n   const isOpen=true;\r\n   const onClose=true;\r\n  const onOpen=true;\r\n  \r\n  const [error,setError]=useState(false);\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    \r\n    \r\n  };\r\n\r\n//    ............states........//\r\n   const [search,setSearch]=useState();\r\n   const [loading,setLoading]=useState();\r\n   const [searchResult,setSearchResult]=useState([]);\r\n   const [loadingChat,setLoadingChat]=useState();\r\n   //Use of chatstate\r\n   const {\r\n    user,\r\n    setSelectedChat,\r\n    chats,\r\n    setChats,\r\n    notification,\r\n    setNotification,\r\n    IconButton,\r\n    removeNotification,\r\n  } = ChatState();\r\n  const navigate=useNavigate();\r\n\r\n\r\n   const handleSearch=()=>{\r\n    //doubt\r\n    \r\n        if(!search){\r\n            <Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'right' }} open={open} onClose={handleClose} autoHideDuration={5000}>\r\n        <Alert  severity=\"error\" variant='filled' sx={{ width: '100%' }}>\r\n        Search Bar is Empty\r\n        </Alert>\r\n      </Snackbar>\r\n            return;\r\n        }\r\n        try{\r\n            setLoading(true);\r\n            const {data}=fetch(`${API}/${user._id}?search=${search}`,\r\n            \r\n        {method:\"GET\",\r\n            headers:{\r\n            Authorization: `Bearer ${user.token}`,\r\n        }}\r\n    )\r\n    setLoading(false);\r\n    setSearchResult(data);\r\n        }\r\n        catch(error){\r\n            setLoading(false);\r\n            <Snackbar anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }} open={open} onClose={handleClose} autoHideDuration={5000}>\r\n        <Alert  severity=\"error\" variant='filled' sx={{ width: '100%' }}>\r\n        Failed to Load the Search Results\r\n        </Alert>\r\n      </Snackbar>\r\n        }\r\n        \r\n   }\r\n   const accessChat=(userId)=>{\r\n       try{\r\n        setLoadingChat(true);\r\n        const {data}=fetch(`${API}/chat`,\r\n        {userId},\r\n        {\r\n            method:\"POST\",\r\n            headers: {\r\n                \"Content-type\": \"application/json\",\r\n                Authorization: `Bearer ${user.token}`,\r\n              },\r\n        }\r\n        )\r\n        if(!chats.find((chat)=>chat._id===data._id))setChats([data,...chats]);\r\n        setSelectedChat(data);\r\n        setLoadingChat(false);\r\n        onClose();\r\n       }\r\n       catch{\r\n          setLoadingChat(false);\r\n          <Snackbar anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }} open={open} onClose={handleClose} autoHideDuration={5000}>\r\n        <Alert  severity=\"error\" variant='filled' sx={{ width: '100%' }}>\r\n        \"Error fetchind the Chat\", ${error.message}\r\n        </Alert>\r\n      </Snackbar>\r\n       }\r\n   }\r\n   //handling the logout functionality\r\n   //\r\n   const LogoutHandler=()=>{\r\n    //line clears the notification array by setting it to an empty array, effectively removing any pending notifications.\r\n    setNotification([]);\r\n    //This line removes the \"userInfo\" item from the browser's local storage. This is typically used to clear any stored user information or authentication tokens upon logout.\r\n    localStorage.removeItem(\"userInfo\");\r\n    // This line clears the selected chat by setting it to undefined or null. It ensures that no chat is selected after the user logs out.\r\n    setSelectedChat();\r\n    //This line clears the selected chat by setting it to undefined or null. It ensures that no chat is selected after the user logs out.\r\n    navigate(\"/login\");\r\n   };\r\n    return (\r\n        <>\r\n           <Box\r\n      display=\"flex\"\r\n      justifyContent=\"space-between\"\r\n      alignItems=\"center\"\r\n      bgcolor=\"white\"\r\n      width=\"100%\"\r\n      padding=\"5px 10px\"\r\n      border=\"5px solid\"\r\n    >\r\n    <Tooltip title=\"Search friends to talk...\" arrow placement=\"bottom-end\" >\r\n        <Button variant=\"outlined\" onClick={onOpen}>\r\n          <Search/>\r\n          <span style={{display:'none',flex:1,paddingLeft:4}}>\r\n            Find Friend\r\n          </span>\r\n          </Button>\r\n    </Tooltip>\r\n    <Typography variant=\"h3\" fontFamily=\"Quicksand\" color=\"black\">\r\n      SociSnap\r\n    </Typography>\r\n\r\n    <div style={{ display: 'flex', alignContent: 'center' }}>\r\n    <Menu>\r\n        <IconButton>\r\n          <Badge badgeContent={notification?.length || 0} color=\"error\">\r\n            <Notifications />\r\n          </Badge>\r\n        </IconButton>\r\n        <MenuList pl={5} pr={5}>\r\n          {notification?.length ? (\r\n            notification.map((notif) => (\r\n              <React.Fragment key={notif._id}>\r\n                <MenuItem\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    removeNotification(notif.chat._id);\r\n                  }}\r\n                  sx={{ display: 'contents' }}\r\n                >\r\n                  <Box fontWeight=\"semibold\">\r\n                    {notif.chat.isGroupChat\r\n                      ? `New Message in ${notif.chat.chatName}`\r\n                      : `New Message from ${getOtherUsers(user, notif.chat.users).name}`}\r\n                  </Box>\r\n                  <div>{notif.content}</div>\r\n                </MenuItem>\r\n                <Divider />\r\n              </React.Fragment>\r\n            ))\r\n          ) : (\r\n            <MenuItem>\r\n              <Typography>No New Messages</Typography>\r\n            </MenuItem>\r\n          )}\r\n        </MenuList>\r\n      </Menu>\r\n      \r\n      <Menu>\r\n        <IconButton p={1} as={Button} rightIcon={<ExpandMore/>} backgroundColor=\"inherit\">\r\n        <Avatar size= \"small\" \r\n        cursor= \"pointer\"\r\n         alt= {user?.name || 'User'}\r\n         src={user?.pic}/>\r\n        </IconButton>\r\n        <MenuList>\r\n            <ProfileModal user={user} size=\"small\">\r\n               <Typography>My Profiles</Typography>\r\n            </ProfileModal>\r\n            <Divider/>\r\n            <MenuItem onClick={LogoutHandler}>LogOut</MenuItem>\r\n        </MenuList>\r\n      </Menu>\r\n    </div>\r\n    </Box>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        <div>\r\n           Search User\r\n           <Drawer anchor=\"left\" onClose={onClose} isOpen={isOpen}>\r\n           <Typography borderBottomWidth={\"1px\"}>Search Users</Typography>\r\n            <Box display={\"flex\"} pb={2}>\r\n              <InputBase\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(event) => setSearch(event.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n{/* if it is loading then calling  chatloading function which will call for */}\r\n{/* renders a Stack component with a single Skeleton component inside. The Skeleton component is used as a loading placeholder, */}\r\n            {loading ? (<ChatLoading/>):(\r\n// if loading value gets false then it will start mapping on array obtained by useState searchResult \r\n//map() function will iterate over every user and return the result \r\n//based on the callback function i.e accesschat() and store it in array\r\n                searchResult?.map((user)=>(\r\n                    <ListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={()=>accessChat(user._id)}\r\n                    />\r\n                ))\r\n            )}\r\n{/* loadingChat is likely a boolean variable that indicates whether a loading state is active or not. */}\r\n            {loadingChat && <CircularProgress sx={{ marginLeft: 'auto', display: 'flex' }}/> }\r\n             <Divider/>\r\n            \r\n           </Drawer>\r\n        </div>\r\n        </>\r\n    )\r\n}","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\chatloading.js",[],[],{"ruleId":"136","severity":1,"message":"137","line":2,"column":10,"nodeType":"138","messageId":"139","endLine":2,"endColumn":15},{"ruleId":"136","severity":1,"message":"140","line":4,"column":8,"nodeType":"138","messageId":"139","endLine":4,"endColumn":20},{"ruleId":"136","severity":1,"message":"141","line":22,"column":11,"nodeType":"138","messageId":"139","endLine":22,"endColumn":26},{"ruleId":"136","severity":1,"message":"142","line":2,"column":8,"nodeType":"138","messageId":"139","endLine":2,"endColumn":20},{"ruleId":"136","severity":1,"message":"143","line":3,"column":23,"nodeType":"138","messageId":"139","endLine":3,"endColumn":31},{"ruleId":"136","severity":1,"message":"144","line":12,"column":8,"nodeType":"138","messageId":"139","endLine":12,"endColumn":24},{"ruleId":"136","severity":1,"message":"145","line":13,"column":8,"nodeType":"138","messageId":"139","endLine":13,"endColumn":16},{"ruleId":"136","severity":1,"message":"146","line":20,"column":23,"nodeType":"138","messageId":"139","endLine":20,"endColumn":36},{"ruleId":"136","severity":1,"message":"147","line":31,"column":11,"nodeType":"138","messageId":"139","endLine":31,"endColumn":19},{"ruleId":"136","severity":1,"message":"148","line":33,"column":11,"nodeType":"138","messageId":"139","endLine":33,"endColumn":23},{"ruleId":null,"fatal":true,"severity":2,"message":"149","line":54,"column":1,"nodeType":null},{"ruleId":"136","severity":1,"message":"150","line":2,"column":20,"nodeType":"138","messageId":"139","endLine":2,"endColumn":29},{"ruleId":"136","severity":1,"message":"151","line":3,"column":10,"nodeType":"138","messageId":"139","endLine":3,"endColumn":19},{"ruleId":"136","severity":1,"message":"152","line":13,"column":8,"nodeType":"138","messageId":"139","endLine":13,"endColumn":21},{"ruleId":"136","severity":1,"message":"153","line":15,"column":8,"nodeType":"138","messageId":"139","endLine":15,"endColumn":25},{"ruleId":"136","severity":1,"message":"154","line":18,"column":10,"nodeType":"138","messageId":"139","endLine":18,"endColumn":14},{"ruleId":"136","severity":1,"message":"155","line":28,"column":10,"nodeType":"138","messageId":"139","endLine":28,"endColumn":15},{"ruleId":"136","severity":1,"message":"156","line":28,"column":16,"nodeType":"138","messageId":"139","endLine":28,"endColumn":24},{"ruleId":"136","severity":1,"message":"157","line":46,"column":11,"nodeType":"138","messageId":"139","endLine":46,"endColumn":17},{"ruleId":"136","severity":1,"message":"158","line":50,"column":10,"nodeType":"138","messageId":"139","endLine":50,"endColumn":13},{"ruleId":"136","severity":1,"message":"151","line":7,"column":10,"nodeType":"138","messageId":"139","endLine":7,"endColumn":19},{"ruleId":"136","severity":1,"message":"159","line":22,"column":10,"nodeType":"138","messageId":"139","endLine":22,"endColumn":16},{"ruleId":"136","severity":1,"message":"160","line":23,"column":10,"nodeType":"138","messageId":"139","endLine":23,"endColumn":16},{"ruleId":"136","severity":1,"message":"161","line":25,"column":10,"nodeType":"138","messageId":"139","endLine":25,"endColumn":17},{"ruleId":"162","severity":1,"message":"163","line":34,"column":7,"nodeType":"164","messageId":"165","endLine":34,"endColumn":8,"fix":"166"},{"ruleId":"136","severity":1,"message":"167","line":2,"column":23,"nodeType":"138","messageId":"139","endLine":2,"endColumn":28},{"ruleId":"136","severity":1,"message":"168","line":6,"column":5,"nodeType":"138","messageId":"139","endLine":6,"endColumn":15},{"ruleId":"136","severity":1,"message":"169","line":28,"column":25,"nodeType":"138","messageId":"139","endLine":28,"endColumn":31},{"ruleId":"136","severity":1,"message":"156","line":42,"column":16,"nodeType":"138","messageId":"139","endLine":42,"endColumn":24},{"ruleId":"136","severity":1,"message":"170","line":43,"column":9,"nodeType":"138","messageId":"139","endLine":43,"endColumn":24},"no-unused-vars","'Alert' is defined but never used.","Identifier","unusedVar","'ChatProvider' is defined but never used.","'getNotification' is assigned a value but never used.","'ProfileModal' is defined but never used.","'Navigate' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'ThemeProvider' is defined but never used.","'navigate' is assigned a value but never used.","'defaultTheme' is assigned a value but never used.","Parsing error: Unexpected token (54:1)","'useEffect' is defined but never used.","'ChatState' is defined but never used.","'DialogActions' is defined but never used.","'DialogContentText' is defined but never used.","'blue' is defined but never used.","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","'search' is assigned a value but never used.","'jwt' is assigned a value but never used.","'onOpen' is assigned a value but never used.","'isOpen' is assigned a value but never used.","'isClose' is assigned a value but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"171","text":"172"},"'Stack' is defined but never used.","'IconButton' is defined but never used.","'Effect' is defined but never used.","'handleClickOpen' is assigned a value but never used.",[773,780],"\r\n    ."]