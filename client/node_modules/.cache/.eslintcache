[{"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\index.js":"1","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\App.js":"2","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Mychats.js":"3","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\chatloading.js":"4","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Pages\\ChatPage.js":"5","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\ChatBox.js":"6","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\SingleChat.js":"7","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Pages\\HomePage.js":"8","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Context\\chatProvider.js":"9","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Pages\\Homepage.js":"10","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Pages\\Chatpage.js":"11","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\config\\ChatLogics.js":"12","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\MyChats.js":"13","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\ChatBox.js":"14","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\Authentication\\Signup.js":"15","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\miscellaneous\\SideDrawer.js":"16","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\Authentication\\Login.js":"17","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\ChatLoading.js":"18","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\miscellaneous\\GroupChatModal.js":"19","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\SingleChat.js":"20","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\miscellaneous\\ProfileModal.js":"21","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\UserAvatar\\UserListItem.js":"22","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\ScrollableChat.js":"23","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\UserAvatar\\UserBadgeItem.js":"24","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\miscellaneous\\UpdateGroupChatModal.js":"25","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\API.js":"26"},{"size":468,"mtime":1688488739454,"results":"27","hashOfConfig":"28"},{"size":389,"mtime":1688494306255,"results":"29","hashOfConfig":"28"},{"size":4245,"mtime":1688478211932,"results":"30","hashOfConfig":"31"},{"size":543,"mtime":1688478211935,"results":"32","hashOfConfig":"31"},{"size":948,"mtime":1688478211936,"results":"33","hashOfConfig":"31"},{"size":911,"mtime":1688478211924,"results":"34","hashOfConfig":"31"},{"size":9585,"mtime":1688480494001,"results":"35","hashOfConfig":"31"},{"size":1229,"mtime":1688478211937,"results":"36","hashOfConfig":"31"},{"size":3357,"mtime":1688493680785,"results":"37","hashOfConfig":"28"},{"size":1485,"mtime":1688492543433,"results":"38","hashOfConfig":"28"},{"size":836,"mtime":1688488739539,"results":"39","hashOfConfig":"28"},{"size":1408,"mtime":1688488740044,"results":"40","hashOfConfig":"28"},{"size":3752,"mtime":1688496512847,"results":"41","hashOfConfig":"28"},{"size":650,"mtime":1688495131764,"results":"42","hashOfConfig":"28"},{"size":5579,"mtime":1688494223045,"results":"43","hashOfConfig":"28"},{"size":6637,"mtime":1688493229997,"results":"44","hashOfConfig":"28"},{"size":3228,"mtime":1688493068172,"results":"45","hashOfConfig":"28"},{"size":601,"mtime":1688488739645,"results":"46","hashOfConfig":"28"},{"size":5015,"mtime":1688493166046,"results":"47","hashOfConfig":"28"},{"size":8112,"mtime":1688493444990,"results":"48","hashOfConfig":"28"},{"size":1986,"mtime":1688488739932,"results":"49","hashOfConfig":"28"},{"size":799,"mtime":1688488739866,"results":"50","hashOfConfig":"28"},{"size":2044,"mtime":1688493385163,"results":"51","hashOfConfig":"28"},{"size":515,"mtime":1688488739841,"results":"52","hashOfConfig":"28"},{"size":7188,"mtime":1688493329674,"results":"53","hashOfConfig":"28"},{"size":42,"mtime":1688494154072,"results":"54","hashOfConfig":"28"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"14jvay7",{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1a61mm9",{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"58"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\index.js",[],[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\App.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\Mychats.js",["138","139","140","141","142","143"],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\chatloading.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Pages\\ChatPage.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\ChatBox.js",["144","145"],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Components\\SingleChat.js",["146","147","148","149","150","151","152","153","154","155","156","157"],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Pages\\HomePage.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Context\\chatProvider.js",["158"],[],"import { useToast} from \"@chakra-ui/react\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { createContext, useContext, useEffect, useState } from \"react\";\nimport { getOtherUsers } from \"../config/ChatLogics\";\nimport { API } from \"../API\";\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [user, setUser] = useState();\n  const [selectedChat, setSelectedChat] = useState();\n  const [chats, setChats] = useState([]);\n  const [notification, setNotification] = useState([]);\n\n  const navigate = useNavigate();\n\n  const toast = useToast();\n\n  useEffect(() => {\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\n    setUser(userInfo);\n\n    if (!userInfo) {\n      navigate(\"/\");\n    }\n  }, [navigate]);\n\n  const getNotifications = async () => {\n    if (!user) {\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\n        `${API}/api/user/getnotifications/${user._id}`,\n        config\n      );\n\n      var notificationArray = [];\n      data.notifications.forEach((element) => {\n        notificationArray.push(element.message);\n      });\n      setNotification(notificationArray);\n    } catch (error) {\n      toast({\n        title: \"Error fetching the Notifications\",\n        description: error.message,\n        status: \"error\",\n        isClosable: true,\n        position: \"top\",\n      });\n    }\n  };\n\n  const removeNotification = async (chatId) => {\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.put(\n        `${API}/api/user/removenotification`,\n        {\n          userId: user._id,\n          chatId: chatId,\n        },\n        config\n      );\n\n      console.log(data);\n\n      var notificationArray = [];\n      data.notifications.forEach((element) => {\n        notificationArray.push(element.message);\n      });\n      setNotification(notificationArray);\n    } catch (error) {\n      toast({\n        title: \"Error deleting the Notification\",\n        description: error.message,\n        status: \"error\",\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendNotification = async (data) => {\n    const receivers = getOtherUsers(user, selectedChat.users);\n\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `Bearer ${user.token}`,\n      },\n    };\n\n    for (const receiver of receivers) {\n      await axios.post(\n        `${API}/api/user/storenotification`,\n        {\n          userId: receiver._id,\n          messageId: data._id,\n          chatId: data.chat._id,\n        },\n        config\n      );\n    }\n  };\n\n  useEffect(() => {\n    getNotifications();\n  }, [user]);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        user,\n        setUser,\n        selectedChat,\n        setSelectedChat,\n        chats,\n        setChats,\n        notification,\n        setNotification,\n        removeNotification,\n        sendNotification,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Pages\\Homepage.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Pages\\Chatpage.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\config\\ChatLogics.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\MyChats.js",["159"],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\ChatBox.js",["160","161"],[],"import React from \"react\";\nimport { ChatState } from \"../Context/chatProvider\";\nimport SingleChat from \"./SingleChat\";\nimport { Box , Stack, Typography} from '@mui/material'\nconst ChatBox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      display={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir={\"column\"}\n      p={3}\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"68%\" }}\n      borderRadius=\"lg\"\n      borderWidth={\"1px\"}\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default ChatBox;\n",[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\Authentication\\Signup.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\miscellaneous\\SideDrawer.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\Authentication\\Login.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\ChatLoading.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\miscellaneous\\GroupChatModal.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\SingleChat.js",["162","163","164"],[],"import { CloseIcon } from \"@chakra-ui/icons\";\nimport {\n  Box,\n  Button,\n  FormControl,\n  IconButton,\n  Input,\n  Spinner,\n  Text,\n  useToast,\n} from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { getOtherUser, getOtherUsers } from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/chatProvider\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport SendIcon from \"@mui/icons-material/Send\";\nimport axios from \"axios\";\nimport \"./styles.css\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport io from \"socket.io-client\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport { API } from \"../API\";\nconst ENDPOINT = API;\nvar socket, selectedChatCompare, lastRoom;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n\n  const {\n    user,\n    selectedChat,\n    setSelectedChat,\n    notification,\n    setNotification,\n    sendNotification,\n    removeNotification,\n  } = ChatState();\n\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    renderSettings: {\n      preserveAspectRatio: \"xMidYMid meet\",\n    },\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => {\n      setIsTyping(true);\n    });\n    socket.on(\"stop typing\", () => setIsTyping(false));\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n    if (selectedChat) {\n      socket.emit(\"leave room\", lastRoom);\n      lastRoom = selectedChat._id;\n    }\n    selectedChatCompare = selectedChat;\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message received\", (newMessageReceived) => {\n      if (\n        !selectedChatCompare ||\n        selectedChatCompare._id !== newMessageReceived.chat._id\n      ) {\n        if (!notification.includes(newMessageReceived)) {\n          setNotification([newMessageReceived, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageReceived]);\n        removeNotification(newMessageReceived.chat._id)\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n\n      setMessages(data);\n      setLoading(false);\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      setLoading(false);\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load Messages\",\n        duration: 5000,\n        status: \"error\",\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async () => {\n    socket.emit(\"stop typing\", selectedChat._id);\n    if (newMessage) {\n      try {\n        const config = {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n\n        setNewMessage(\"\");\n\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat._id,\n          },\n          config\n        );\n\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n\n        sendNotification(data);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          duration: 5000,\n          status: \"error\",\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w={\"100%\"}\n            fontFamily={\"QuickSand\"}\n            display=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <div style={{ display: \"inherit\" }}>\n              {!selectedChat.isGroupChat ? (\n                <>\n                  <Box mr=\"10px\">\n                    <ProfileModal\n                      user={getOtherUser(user, selectedChat.users)}\n                      size=\"md\"\n                    />\n                  </Box>\n                  {getOtherUser(user, selectedChat.users).name}\n                </>\n              ) : (\n                <>\n                  <Box mr=\"10px\">\n                    <UpdateGroupChatModal\n                      fetchAgain={fetchAgain}\n                      setFetchAgain={setFetchAgain}\n                      fetchMessages={fetchMessages}\n                    />\n                  </Box>\n                  {selectedChat.chatName.toUpperCase()}\n                </>\n              )}\n            </div>\n            <IconButton\n              display={{ base: \"flex\", md: \"none\" }}\n              size=\"sm\"\n              backgroundColor={\"inherit\"}\n              borderRadius=\"100%\"\n              icon={<CloseIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n          </Text>\n\n          <Box\n            display={\"flex\"}\n            flexDir=\"column\"\n            justifyContent={\"flex-end\"}\n            p={3}\n            bg=\"#E8E8E8\"\n            w={\"100%\"}\n            h={\"100%\"}\n            borderRadius=\"lg\"\n            overflowY={\"hidden\"}\n          >\n            {loading ? (\n              <Spinner\n                size={\"xl\"}\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            {isTyping ? (\n              <>\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              </>\n            ) : (\n              <></>\n            )}\n\n            <FormControl isRequired mt={3} display=\"flex\">\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message...\"\n                onChange={typingHandler}\n                value={newMessage}\n                backgroundColor=\"#D3D3D3\"\n              />\n              <Button\n                rightIcon={<SendIcon style={{ fill: \"white\" }} />}\n                backgroundColor=\"#187BCD\"\n                ml={1}\n                onClick={sendMessage}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        <Box\n          display={\"flex\"}\n          alignItems=\"center\"\n          justifyContent={\"center\"}\n          h=\"100%\"\n        >\n          <Text fontSize={\"3xl\"} pb={3} fontFamily=\"QuickSand\">\n            Click on a User to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\miscellaneous\\ProfileModal.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\UserAvatar\\UserListItem.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\ScrollableChat.js",["165"],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\UserAvatar\\UserBadgeItem.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\miscellaneous\\UpdateGroupChatModal.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\API.js",[],[],{"ruleId":"166","severity":1,"message":"167","line":7,"column":10,"nodeType":"168","messageId":"169","endLine":7,"endColumn":22},{"ruleId":"166","severity":1,"message":"170","line":22,"column":5,"nodeType":"168","messageId":"169","endLine":22,"endColumn":17},{"ruleId":"166","severity":1,"message":"171","line":27,"column":8,"nodeType":"168","messageId":"169","endLine":27,"endColumn":15},{"ruleId":"166","severity":1,"message":"172","line":27,"column":17,"nodeType":"168","messageId":"169","endLine":27,"endColumn":27},{"ruleId":"173","severity":1,"message":"174","line":46,"column":5,"nodeType":"175","endLine":46,"endColumn":17,"suggestions":"176"},{"ruleId":"177","severity":1,"message":"178","line":86,"column":13,"nodeType":"179","messageId":"180","endLine":86,"endColumn":18},{"ruleId":"166","severity":1,"message":"181","line":5,"column":8,"nodeType":"168","messageId":"169","endLine":5,"endColumn":22},{"ruleId":"182","severity":1,"message":"183","line":20,"column":71,"nodeType":"184","endLine":20,"endColumn":158},{"ruleId":"166","severity":1,"message":"185","line":6,"column":10,"nodeType":"168","messageId":"169","endLine":6,"endColumn":13},{"ruleId":"166","severity":1,"message":"186","line":8,"column":34,"nodeType":"168","messageId":"169","endLine":8,"endColumn":38},{"ruleId":"166","severity":1,"message":"187","line":8,"column":51,"nodeType":"168","messageId":"169","endLine":8,"endColumn":57},{"ruleId":"166","severity":1,"message":"188","line":8,"column":65,"nodeType":"168","messageId":"169","endLine":8,"endColumn":70},{"ruleId":"166","severity":1,"message":"167","line":9,"column":10,"nodeType":"168","messageId":"169","endLine":9,"endColumn":22},{"ruleId":"166","severity":1,"message":"189","line":15,"column":10,"nodeType":"168","messageId":"169","endLine":15,"endColumn":18},{"ruleId":"166","severity":1,"message":"190","line":16,"column":10,"nodeType":"168","messageId":"169","endLine":16,"endColumn":17},{"ruleId":"166","severity":1,"message":"191","line":17,"column":10,"nodeType":"168","messageId":"169","endLine":17,"endColumn":16},{"ruleId":"166","severity":1,"message":"192","line":40,"column":9,"nodeType":"168","messageId":"169","endLine":40,"endColumn":27},{"ruleId":"173","severity":1,"message":"193","line":54,"column":7,"nodeType":"175","endLine":54,"endColumn":9,"suggestions":"194"},{"ruleId":"173","severity":1,"message":"195","line":130,"column":7,"nodeType":"175","endLine":130,"endColumn":21,"suggestions":"196"},{"ruleId":"173","severity":1,"message":"197","line":151,"column":7,"nodeType":"175","endLine":151,"endColumn":9,"suggestions":"198"},{"ruleId":"173","severity":1,"message":"199","line":122,"column":6,"nodeType":"175","endLine":122,"endColumn":12,"suggestions":"200"},{"ruleId":"173","severity":1,"message":"174","line":49,"column":6,"nodeType":"175","endLine":49,"endColumn":18,"suggestions":"201"},{"ruleId":"166","severity":1,"message":"188","line":4,"column":16,"nodeType":"168","messageId":"169","endLine":4,"endColumn":21},{"ruleId":"166","severity":1,"message":"202","line":4,"column":23,"nodeType":"168","messageId":"169","endLine":4,"endColumn":33},{"ruleId":"166","severity":1,"message":"203","line":13,"column":24,"nodeType":"168","messageId":"169","endLine":13,"endColumn":37},{"ruleId":"173","severity":1,"message":"193","line":65,"column":6,"nodeType":"175","endLine":65,"endColumn":8,"suggestions":"204"},{"ruleId":"173","severity":1,"message":"205","line":74,"column":6,"nodeType":"175","endLine":74,"endColumn":20,"suggestions":"206"},{"ruleId":"166","severity":1,"message":"185","line":11,"column":10,"nodeType":"168","messageId":"169","endLine":11,"endColumn":13},"no-unused-vars","'getOtherUser' is defined but never used.","Identifier","unusedVar","'notification' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchChats'. Either include it or remove the dependency array.","ArrayExpression",["207"],"no-dupe-keys","Duplicate key 'width'.","ObjectExpression","unexpected","'ScrollableFeed' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'API' is defined but never used.","'Grid' is defined but never used.","'Button' is defined but never used.","'Stack' is defined but never used.","'TrySharp' is defined but never used.","'GetUser' is defined but never used.","'useRef' is defined but never used.","'removeNotification' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["208"],"React Hook useEffect has missing dependencies: 'fetchAgain', 'fetchMessages', and 'setFetchAgain'. Either include them or remove the dependency array. If 'setFetchAgain' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["209"],"React Hook useEffect has missing dependencies: 'fetchAgain', 'fetchMessages', 'messages', 'notification', 'removeNotifications', 'setFetchAgain', 'setNotification', and 'user'. Either include them or remove the dependency array. If 'setFetchAgain' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["210"],"React Hook useEffect has a missing dependency: 'getNotifications'. Either include it or remove the dependency array.",["211"],["212"],"'Typography' is defined but never used.","'getOtherUsers' is defined but never used.",["213"],"React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.",["214"],{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"215","fix":"225"},{"desc":"217","fix":"226"},{"desc":"227","fix":"228"},"Update the dependencies array to be: [fetchAgain, fetchChats]",{"range":"229","text":"230"},"Update the dependencies array to be: [user]",{"range":"231","text":"232"},"Update the dependencies array to be: [fetchAgain, fetchMessages, selectedChat, setFetchAgain]",{"range":"233","text":"234"},"Update the dependencies array to be: [fetchAgain, fetchMessages, messages, notification, removeNotifications, setFetchAgain, setNotification, user]",{"range":"235","text":"236"},"Update the dependencies array to be: [getNotifications, user]",{"range":"237","text":"238"},{"range":"239","text":"230"},{"range":"240","text":"232"},"Update the dependencies array to be: [fetchMessages, selectedChat]",{"range":"241","text":"242"},[1193,1205],"[fetchAgain, fetchChats]",[1868,1870],"[user]",[4657,4671],"[fetchAgain, fetchMessages, selectedChat, setFetchAgain]",[5466,5468],"[fetchAgain, fetchMessages, messages, notification, removeNotifications, setFetchAgain, setNotification, user]",[2914,2920],"[getNotifications, user]",[1287,1299],[1841,1843],[2041,2055],"[fetchMessages, selectedChat]"]