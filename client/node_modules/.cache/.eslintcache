[{"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\index.js":"1","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\App.js":"3","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Router.js":"4","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Login.js":"5","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Signup.js":"6","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Helper\\APIcalls.js":"7","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\backend.js":"8"},{"size":552,"mtime":1685974982139,"results":"9","hashOfConfig":"10"},{"size":375,"mtime":1685974982141,"results":"11","hashOfConfig":"10"},{"size":188,"mtime":1686031127963,"results":"12","hashOfConfig":"10"},{"size":440,"mtime":1686031127984,"results":"13","hashOfConfig":"10"},{"size":4470,"mtime":1686031127977,"results":"14","hashOfConfig":"10"},{"size":5205,"mtime":1686031127979,"results":"15","hashOfConfig":"10"},{"size":1319,"mtime":1686031127974,"results":"16","hashOfConfig":"10"},{"size":95,"mtime":1686031127986,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qpjxl0",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\index.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\App.js",["47"],[],"import React from 'react'\r\nimport { Alert } from '@mui/material'\r\nimport Routers from \"./Router\"\r\nexport default function App() {\r\n  return (\r\n    <div> \r\n      <Routers/> </div>\r\n  )\r\n}\r\n","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Router.js",["48"],[],"import React from 'react'\r\nimport { Route,Routes, BrowserRouter, useParams } from 'react-router-dom'\r\nimport Signup from './Components/Auth/Signup'\r\nimport Login from './Components/Auth/Login'\r\nexport default function Router() {\r\n  return (\r\n    <BrowserRouter>\r\n    <Routes>\r\n        <Route path='/signup' exact element={<Signup/>} />\r\n        <Route path='/login' exact element={<Login/>} />\r\n    </Routes>\r\n    </BrowserRouter>\r\n  )\r\n}\r\n","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Login.js",["49","50","51","52","53","54","55"],[],"import React from 'react'\r\nimport {useState} from \"react\"\r\nimport { useNavigate, Navigate } from 'react-router-dom';\r\nimport {login} from \"./Helper/APIcalls\"\r\n\r\n// --------------------------------------------------------\r\n// Material UI\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport TextField from '@mui/material/TextField';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Link from '@mui/material/Link';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport { Snackbar,Alert } from '@mui/material';\r\n\r\n// --------------------------------------------------------\r\nexport default function Login() {\r\n    const [show, setShow] = useState(false);\r\n   \r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [success, setSuccess] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    const defaultTheme = createTheme();    \r\n      const handleChange = name => event => {\r\n        \r\n        if(name===\"email\"){\r\n            setEmail(event.target.value);\r\n        }\r\n        else {\r\n            setPassword(event.target.value)\r\n        }\r\n      }\r\n\r\n      const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(!email || !password){\r\n          setShow(true);\r\n          \r\n        }\r\n        else{\r\n            login({email,password}).then(data => {\r\n                setSuccess(true);\r\n                setEmail(\"\");\r\n                setPassword(\"\");\r\n                console.log(data);\r\n            }\r\n            )\r\n        }\r\n       \r\n      };\r\n\r\n      const handleClose = event => {\r\n        setShow(false);\r\n        setSuccess(false);\r\n      }\r\n    \r\n \r\n\r\n\r\n  return (\r\n    <div >\r\n      <Snackbar open={show} autoHideDuration={4000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\" variant='filled' sx={{ width: '100%' }}>\r\n          Please fill all the fields!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar open={success} autoHideDuration={4000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\" variant='filled' sx={{ width: '100%' }}>\r\n          Logined Successfully!!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Avatar sx={{ m: 1, bgcolor: 'blue' }}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n           Sign In\r\n          </Typography>\r\n          <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  value={email}\r\n                  onChange={handleChange(\"email\")}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\" \r\n                  value={password}\r\n                  onChange={handleChange(\"password\")}\r\n                  autoComplete=\"new-password\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={[{ mt: 3, mb: 2, bgcolor:\"blue\" },{\r\n                '&:hover':{\r\n                    bgcolor: \"#2827CC\"\r\n                }\r\n              }]\r\n            }\r\n            onClick={handleSubmit}\r\n            >\r\n              Login\r\n            </Button>\r\n\r\n          </Box>\r\n        </Box>\r\n    \r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Signup.js",["56","57","58","59","60","61"],[],"import React from 'react'\r\nimport {useState} from \"react\"\r\nimport { useNavigate, Navigate } from 'react-router-dom';\r\nimport {signup} from \"./Helper/APIcalls\"\r\n\r\n// --------------------------------------------------------\r\n// Material UI\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport TextField from '@mui/material/TextField';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Link from '@mui/material/Link';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport { Snackbar,Alert } from '@mui/material';\r\n\r\n// --------------------------------------------------------\r\nexport default function Signup() {\r\n\r\n    const [show, setShow] = useState(false);\r\n    const [name , setName] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [success, setSuccess] = useState(false);\r\n    const navigate = useNavigate();\r\n\r\n    const defaultTheme = createTheme();    \r\n      const handleChange = name => event => {\r\n        if(name===\"name\"){\r\n            setName(event.target.value);\r\n        }\r\n        else if(name===\"email\"){\r\n            setEmail(event.target.value);\r\n        }\r\n        else {\r\n            setPassword(event.target.value)\r\n        }\r\n      }\r\n\r\n      const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        if(!name || !email || !password){\r\n          setShow(true);\r\n        }\r\n        signup({name,email,password}).then(data => {\r\n            setSuccess(true);\r\n            setName(\"\");\r\n            setEmail(\"\");\r\n            setPassword(\"\");\r\n            console.log(data);\r\n        }\r\n        )\r\n      };\r\n\r\n      const handleClose = event => {\r\n        setShow(false);\r\n        setSuccess(false);\r\n      }\r\n    \r\n \r\n\r\n\r\n  return (\r\n    <div >\r\n      <Snackbar open={show} autoHideDuration={4000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\" variant='filled' sx={{ width: '100%' }}>\r\n          Please fill all the fields!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Snackbar open={success} autoHideDuration={4000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"success\" variant='filled' sx={{ width: '100%' }}>\r\n          Signed Up Successfully!!\r\n        </Alert>\r\n      </Snackbar>\r\n      <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <Box\r\n          sx={{\r\n            marginTop: 8,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          <Avatar sx={{ m: 1, bgcolor: 'blue' }}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign up\r\n          </Typography>\r\n          <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{ mt: 3 }}>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  value={name}\r\n                  name=\"Name\"\r\n                  required\r\n                  fullWidth\r\n                  id=\"Name\"\r\n                  label=\"Name\"\r\n                  autoFocus\r\n                  onChange={handleChange(\"name\")}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  id=\"email\"\r\n                  label=\"Email Address\"\r\n                  name=\"email\"\r\n                  value={email}\r\n                  onChange={handleChange(\"email\")}\r\n                />\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <TextField\r\n                  required\r\n                  fullWidth\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  id=\"password\" \r\n                  value={password}\r\n                  onChange={handleChange(\"password\")}\r\n                  autoComplete=\"new-password\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Button\r\n              type=\"submit\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n             \r\n              sx={[{ mt: 3, mb: 2, bgcolor:\"blue\" },{\r\n                '&:hover':{\r\n                    bgcolor: \"#2827CC\"\r\n                }\r\n              }]}\r\n            onClick={handleSubmit}\r\n            >\r\n              Sign Up\r\n            </Button>\r\n            <Grid container justifyContent=\"flex-end\">\r\n              <Grid item>\r\n                <Link href=\"http://localhost:3000/login\" variant=\"body2\">\r\n                  Already have an account? Sign in\r\n                </Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n    \r\n      </Container>\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\Components\\Auth\\Helper\\APIcalls.js",["62"],[],"import {API} from \"../../../backend\"\r\n\r\n\r\nexport const login = (user) => {\r\n    \r\n    return fetch(`${API}/login`,{\r\n        method:\"POST\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(user)\r\n    })\r\n    .then(response => {\r\n        return response.json(user);\r\n    })\r\n    .catch(err => {return err })\r\n}\r\n\r\nexport const signup = (user) => {\r\n    console.log(API);\r\n    return fetch(`${API}/signup`,{\r\n        method:\"POST\",\r\n        headers:{\r\n            Accept: \"application/json\",\r\n            \"Content-Type\":\"application/json\"\r\n        },\r\n        body: JSON.stringify(user)\r\n\r\n    }).then((resp,err)=>{\r\n        if(err){\r\n            return ;\r\n        }\r\n        else return resp.json();\r\n    }).\r\n    catch(err=>{\r\n        console.log(err);\r\n        return\r\n    })\r\n}\r\n\r\nexport const authenticate = (data, next) =>{\r\n    if(typeof window !== \"undefined\"){\r\n        localStorage.setItem(\"jwt\",JSON.stringify(data))\r\n\r\n        next();\r\n    }\r\n}\r\n\r\nexport const isAuthenticated = () => {\r\n    if(typeof window == \"undefined\"){\r\n        return false\r\n    }\r\n    if(localStorage.getItem(\"jwt\")){\r\n        return JSON.parse(localStorage.getItem(\"jwt\"));\r\n        \r\n    }\r\n    else{\r\n        return false    }\r\n}","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client-\\client\\src\\backend.js",[],[],{"ruleId":"63","severity":1,"message":"64","line":2,"column":10,"nodeType":"65","messageId":"66","endLine":2,"endColumn":15},{"ruleId":"63","severity":1,"message":"67","line":2,"column":39,"nodeType":"65","messageId":"66","endLine":2,"endColumn":48},{"ruleId":"63","severity":1,"message":"68","line":3,"column":23,"nodeType":"65","messageId":"66","endLine":3,"endColumn":31},{"ruleId":"63","severity":1,"message":"69","line":12,"column":8,"nodeType":"65","messageId":"66","endLine":12,"endColumn":24},{"ruleId":"63","severity":1,"message":"70","line":13,"column":8,"nodeType":"65","messageId":"66","endLine":13,"endColumn":16},{"ruleId":"63","severity":1,"message":"71","line":14,"column":8,"nodeType":"65","messageId":"66","endLine":14,"endColumn":12},{"ruleId":"63","severity":1,"message":"72","line":20,"column":23,"nodeType":"65","messageId":"66","endLine":20,"endColumn":36},{"ruleId":"63","severity":1,"message":"73","line":30,"column":11,"nodeType":"65","messageId":"66","endLine":30,"endColumn":19},{"ruleId":"63","severity":1,"message":"74","line":32,"column":11,"nodeType":"65","messageId":"66","endLine":32,"endColumn":23},{"ruleId":"63","severity":1,"message":"68","line":3,"column":23,"nodeType":"65","messageId":"66","endLine":3,"endColumn":31},{"ruleId":"63","severity":1,"message":"69","line":12,"column":8,"nodeType":"65","messageId":"66","endLine":12,"endColumn":24},{"ruleId":"63","severity":1,"message":"70","line":13,"column":8,"nodeType":"65","messageId":"66","endLine":13,"endColumn":16},{"ruleId":"63","severity":1,"message":"72","line":20,"column":23,"nodeType":"65","messageId":"66","endLine":20,"endColumn":36},{"ruleId":"63","severity":1,"message":"73","line":31,"column":11,"nodeType":"65","messageId":"66","endLine":31,"endColumn":19},{"ruleId":"63","severity":1,"message":"74","line":33,"column":11,"nodeType":"65","messageId":"66","endLine":33,"endColumn":23},{"ruleId":"75","severity":1,"message":"76","line":35,"column":7,"nodeType":"77","messageId":"78","endLine":35,"endColumn":8,"fix":"79"},"no-unused-vars","'Alert' is defined but never used.","Identifier","unusedVar","'useParams' is defined but never used.","'Navigate' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Link' is defined but never used.","'ThemeProvider' is defined but never used.","'navigate' is assigned a value but never used.","'defaultTheme' is assigned a value but never used.","dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"80","text":"81"},[808,815],"\r\n    ."]