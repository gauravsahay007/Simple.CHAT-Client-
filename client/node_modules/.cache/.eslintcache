
[{"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\App.js":"1","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Pages\\HomePage.js":"2","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Pages\\ChatPage.js":"3","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\miscellaneous\\SideDrawer.js":"4","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\SingleChat.js":"5","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\miscellaneous\\ProfileModal.js":"6","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\miscellaneous\\UpdateGroupChatModal.js":"7","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\Mychats.js":"8","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\miscellaneous\\GroupChatModal.js":"9","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\index.js":"10","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Context\\chatProvider.js":"11","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\config\\ChatLogics.js":"12","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\ChatLoading.js":"13","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\ChatBox.js":"14","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\UserAvatar\\UserBadgeItem.js":"15","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\UserAvatar\\UserListItem.js":"16","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\Authentication\\Login.js":"17","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\Authentication\\Signup.js":"18","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\ScrollableChat.js":"19","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Pages\\Chatpage.js":"20","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Pages\\Homepage.js":"21","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\MyChats.js":"22","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\API.js":"23"},{"size":407,"mtime":1688499095862,"results":"24","hashOfConfig":"25"},{"size":1555,"mtime":1688499065895,"results":"26","hashOfConfig":"25"},{"size":867,"mtime":1688499168130,"results":"27","hashOfConfig":"25"},{"size":6867,"mtime":1688499545760,"results":"28","hashOfConfig":"25"},{"size":8420,"mtime":1688499065875,"results":"29","hashOfConfig":"25"},{"size":2072,"mtime":1688499065885,"results":"30","hashOfConfig":"25"},{"size":7478,"mtime":1688499065888,"results":"31","hashOfConfig":"25"},{"size":3891,"mtime":1688499065872,"results":"32","hashOfConfig":"25"},{"size":5218,"mtime":1688499065882,"results":"33","hashOfConfig":"25"},{"size":485,"mtime":1688499065902,"results":"34","hashOfConfig":"25"},{"size":3505,"mtime":1688499065891,"results":"35","hashOfConfig":"25"},{"size":1463,"mtime":1688499065901,"results":"36","hashOfConfig":"25"},{"size":624,"mtime":1688499065880,"results":"37","hashOfConfig":"25"},{"size":659,"mtime":1688499682054,"results":"38","hashOfConfig":"25"},{"size":541,"mtime":1688499065877,"results":"39","hashOfConfig":"25"},{"size":840,"mtime":1688499065879,"results":"40","hashOfConfig":"25"},{"size":3364,"mtime":1688499065865,"results":"41","hashOfConfig":"25"},{"size":5792,"mtime":1688499065868,"results":"42","hashOfConfig":"25"},{"size":2112,"mtime":1688499065873,"results":"43","hashOfConfig":"25"},{"size":867,"mtime":1688499168130,"results":"44","hashOfConfig":"25"},{"size":1555,"mtime":1688499065895,"results":"45","hashOfConfig":"25"},{"size":3891,"mtime":1688499065872,"results":"46","hashOfConfig":"25"},{"size":42,"mtime":1688499065861,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"14jvay7",{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"57"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\App.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Pages\\HomePage.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Pages\\ChatPage.js",[],[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\miscellaneous\\SideDrawer.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\SingleChat.js",["119","120","121"],[],"import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  FormControl,\r\n  IconButton,\r\n  Input,\r\n  Spinner,\r\n  Text,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { getOtherUser, getOtherUsers } from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/chatProvider\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport SendIcon from \"@mui/icons-material/Send\";\r\nimport axios from \"axios\";\r\nimport \"./styles.css\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport io from \"socket.io-client\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\nimport { API } from \"../API\";\r\nconst ENDPOINT = API;\r\nvar socket, selectedChatCompare, lastRoom;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n\r\n  const {\r\n    user,\r\n    selectedChat,\r\n    setSelectedChat,\r\n    notification,\r\n    setNotification,\r\n    sendNotification,\r\n    removeNotification,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    renderSettings: {\r\n      preserveAspectRatio: \"xMidYMid meet\",\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => {\r\n      setIsTyping(true);\r\n    });\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n    if (selectedChat) {\r\n      socket.emit(\"leave room\", lastRoom);\r\n      lastRoom = selectedChat._id;\r\n    }\r\n    selectedChatCompare = selectedChat;\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message received\", (newMessageReceived) => {\r\n      if (\r\n        !selectedChatCompare ||\r\n        selectedChatCompare._id !== newMessageReceived.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageReceived)) {\r\n          setNotification([newMessageReceived, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageReceived]);\r\n        removeNotification(newMessageReceived.chat._id)\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n\r\n      setMessages(data);\r\n      setLoading(false);\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      setLoading(false);\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load Messages\",\r\n        duration: 5000,\r\n        status: \"error\",\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async () => {\r\n    socket.emit(\"stop typing\", selectedChat._id);\r\n    if (newMessage) {\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n\r\n        setNewMessage(\"\");\r\n\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat._id,\r\n          },\r\n          config\r\n        );\r\n\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n\r\n        sendNotification(data);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          duration: 5000,\r\n          status: \"error\",\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w={\"100%\"}\r\n            fontFamily={\"QuickSand\"}\r\n            display=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <div style={{ display: \"inherit\" }}>\r\n              {!selectedChat.isGroupChat ? (\r\n                <>\r\n                  <Box mr=\"10px\">\r\n                    <ProfileModal\r\n                      user={getOtherUser(user, selectedChat.users)}\r\n                      size=\"md\"\r\n                    />\r\n                  </Box>\r\n                  {getOtherUser(user, selectedChat.users).name}\r\n                </>\r\n              ) : (\r\n                <>\r\n                  <Box mr=\"10px\">\r\n                    <UpdateGroupChatModal\r\n                      fetchAgain={fetchAgain}\r\n                      setFetchAgain={setFetchAgain}\r\n                      fetchMessages={fetchMessages}\r\n                    />\r\n                  </Box>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                </>\r\n              )}\r\n            </div>\r\n            <IconButton\r\n              display={{ base: \"flex\", md: \"none\" }}\r\n              size=\"sm\"\r\n              backgroundColor={\"inherit\"}\r\n              borderRadius=\"100%\"\r\n              icon={<CloseIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n          </Text>\r\n\r\n          <Box\r\n            display={\"flex\"}\r\n            flexDir=\"column\"\r\n            justifyContent={\"flex-end\"}\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w={\"100%\"}\r\n            h={\"100%\"}\r\n            borderRadius=\"lg\"\r\n            overflowY={\"hidden\"}\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size={\"xl\"}\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            {isTyping ? (\r\n              <>\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              </>\r\n            ) : (\r\n              <></>\r\n            )}\r\n\r\n            <FormControl isRequired mt={3} display=\"flex\">\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message...\"\r\n                onChange={typingHandler}\r\n                value={newMessage}\r\n                backgroundColor=\"#D3D3D3\"\r\n              />\r\n              <Button\r\n                rightIcon={<SendIcon style={{ fill: \"white\" }} />}\r\n                backgroundColor=\"#187BCD\"\r\n                ml={1}\r\n                onClick={sendMessage}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <Box\r\n          display={\"flex\"}\r\n          alignItems=\"center\"\r\n          justifyContent={\"center\"}\r\n          h=\"100%\"\r\n        >\r\n          <Text fontSize={\"3xl\"} pb={3} fontFamily=\"QuickSand\">\r\n            Click on a User to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\miscellaneous\\ProfileModal.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\miscellaneous\\UpdateGroupChatModal.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\Mychats.js",["122"],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\miscellaneous\\GroupChatModal.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\index.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Context\\chatProvider.js",["123"],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\config\\ChatLogics.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\ChatLoading.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\ChatBox.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\UserAvatar\\UserBadgeItem.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\UserAvatar\\UserListItem.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\Authentication\\Login.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\Authentication\\Signup.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\ScrollableChat.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Pages\\Chatpage.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\Pages\\Homepage.js",[],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\components\\MyChats.js",["124"],[],"C:\\Users\\Dell\\Simple.CHAT-Client-\\client\\src\\API.js",[],[],{"ruleId":"125","severity":1,"message":"126","line":13,"column":24,"nodeType":"127","messageId":"128","endLine":13,"endColumn":37},{"ruleId":"129","severity":1,"message":"130","line":65,"column":6,"nodeType":"131","endLine":65,"endColumn":8,"suggestions":"132"},{"ruleId":"129","severity":1,"message":"133","line":74,"column":6,"nodeType":"131","endLine":74,"endColumn":20,"suggestions":"134"},{"ruleId":"129","severity":1,"message":"135","line":49,"column":6,"nodeType":"131","endLine":49,"endColumn":18,"suggestions":"136"},{"ruleId":"129","severity":1,"message":"137","line":122,"column":6,"nodeType":"131","endLine":122,"endColumn":12,"suggestions":"138"},{"ruleId":"129","severity":1,"message":"135","line":49,"column":6,"nodeType":"131","endLine":49,"endColumn":18,"suggestions":"139"},"no-unused-vars","'getOtherUsers' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","ArrayExpression",["140"],"React Hook useEffect has a missing dependency: 'fetchMessages'. Either include it or remove the dependency array.",["141"],"React Hook useEffect has a missing dependency: 'fetchChats'. Either include it or remove the dependency array.",["142"],"React Hook useEffect has a missing dependency: 'getNotifications'. Either include it or remove the dependency array.",["143"],["144"],{"desc":"145","fix":"146"},{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"desc":"149","fix":"153"},"Update the dependencies array to be: [user]",{"range":"154","text":"155"},"Update the dependencies array to be: [fetchMessages, selectedChat]",{"range":"156","text":"157"},"Update the dependencies array to be: [fetchAgain, fetchChats]",{"range":"158","text":"159"},"Update the dependencies array to be: [getNotifications, user]",{"range":"160","text":"161"},{"range":"162","text":"159"},[1843,1845],"[user]",[2043,2057],"[fetchMessages, selectedChat]",[1335,1347],"[fetchAgain, fetchChats]",[3035,3041],"[getNotifications, user]",[1252,1264]]

