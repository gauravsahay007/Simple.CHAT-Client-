[{"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\index.js":"1","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\App.js":"2","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Context\\chatProvider.js":"3","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\API.js":"4","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Pages\\HomePage.js":"5","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Pages\\ChatPage.js":"6","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\config\\ChatLogics.js":"7","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\ChatBox.js":"8","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\SingleChat.js":"9","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\Authentication\\Login.js":"10","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\Authentication\\Signup.js":"11","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\miscellaneous\\ProfileModal.js":"12","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\miscellaneous\\UpdateGroupChatModal.js":"13","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\ScrollableChat.js":"14","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\UserAvatar\\UserListItem.js":"15","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\UserAvatar\\UserBadgeItem.js":"16","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\miscellaneous\\SideDrawer.js":"17","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\Mychats.js":"18","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\miscellaneous\\GroupChatModal.js":"19"},{"size":468,"mtime":1688502439877,"results":"20","hashOfConfig":"21"},{"size":391,"mtime":1688502439484,"results":"22","hashOfConfig":"21"},{"size":3357,"mtime":1688502440946,"results":"23","hashOfConfig":"21"},{"size":42,"mtime":1688502439384,"results":"24","hashOfConfig":"21"},{"size":1486,"mtime":1688502556492,"results":"25","hashOfConfig":"21"},{"size":836,"mtime":1688502547265,"results":"26","hashOfConfig":"21"},{"size":1408,"mtime":1688502441150,"results":"27","hashOfConfig":"21"},{"size":635,"mtime":1688502440017,"results":"28","hashOfConfig":"21"},{"size":9029,"mtime":1688502440246,"results":"29","hashOfConfig":"21"},{"size":3228,"mtime":1688502440388,"results":"30","hashOfConfig":"21"},{"size":5579,"mtime":1688502440484,"results":"31","hashOfConfig":"21"},{"size":1986,"mtime":1688501303916,"results":"32","hashOfConfig":"21"},{"size":7188,"mtime":1688501400594,"results":"33","hashOfConfig":"21"},{"size":2044,"mtime":1688501003846,"results":"34","hashOfConfig":"21"},{"size":799,"mtime":1688502440622,"results":"35","hashOfConfig":"21"},{"size":515,"mtime":1688502440536,"results":"36","hashOfConfig":"21"},{"size":13075,"mtime":1688502440784,"results":"37","hashOfConfig":"21"},{"size":3752,"mtime":1688502440051,"results":"38","hashOfConfig":"21"},{"size":5015,"mtime":1688502440671,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vv18b7",{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\index.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\App.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Context\\chatProvider.js",["101"],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\API.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Pages\\HomePage.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Pages\\ChatPage.js",[],[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\config\\ChatLogics.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\ChatBox.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\SingleChat.js",["102"],[],"<<<<<<< HEAD\nimport { CloseIcon } from \"@chakra-ui/icons\";\nimport {\n  Box,\n  Button,\n  FormControl,\n  IconButton,\n  Input,\n  Spinner,\n  Text,\n  useToast,\n} from \"@chakra-ui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { getOtherUser, getOtherUsers } from \"../config/ChatLogics\";\nimport { ChatState } from \"../Context/chatProvider\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport SendIcon from \"@mui/icons-material/Send\";\nimport axios from \"axios\";\nimport \"./styles.css\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport io from \"socket.io-client\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport { API } from \"../API\";\nconst ENDPOINT = API;\n=======\nimport React from 'react'\nimport { useState, useEffect } from 'react'\nimport { ChatState } from '../main/chatProvider'\nimport ProfileModal from './miscellaneous/ProfileModal'\nimport UpdateGroupChatModal from './miscellaneous/UpdateGroupChatModal'\nimport { API } from '../backend'\nimport { FetchMessages, RemoveNotification, SendMessage } from './Helper'\nimport { IconButton, Typography, Grid, TextField, Button , Box, Stack} from '@mui/material'\nimport { getOtherUser } from '../configuration/logic' \nimport CloseIcon from '@mui/icons-material/Close';\nimport { CircularProgress } from '@mui/material';\nimport ScrollableChats from './ScrollableChats'\nimport SendIcon from '@mui/icons-material/Send';\nimport io from \"socket.io-client\"\nimport { TrySharp } from '@mui/icons-material'\nimport { GetUser } from './Helper'\nimport { useRef } from 'react'\n\n>>>>>>> b2401a124fe0cbc90c5475fb7dbd256fe5d1e8ab\nvar socket, selectedChatCompare, lastRoom;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n\n  const {\n    user,\n    selectedChat,\n    setSelectedChat,\n    notification,\n    setNotification,\n    sendNotification,\n    removeNotification,\n  } = ChatState();\n\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    renderSettings: {\n      preserveAspectRatio: \"xMidYMid meet\",\n    },\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => {\n      setIsTyping(true);\n    });\n    socket.on(\"stop typing\", () => setIsTyping(false));\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n    if (selectedChat) {\n      socket.emit(\"leave room\", lastRoom);\n      lastRoom = selectedChat._id;\n    }\n    selectedChatCompare = selectedChat;\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message received\", (newMessageReceived) => {\n      if (\n        !selectedChatCompare ||\n        selectedChatCompare._id !== newMessageReceived.chat._id\n      ) {\n        if (!notification.includes(newMessageReceived)) {\n          setNotification([newMessageReceived, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageReceived]);\n        removeNotification(newMessageReceived.chat._id)\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/message/${selectedChat._id}`,\n        config\n      );\n\n      setMessages(data);\n      setLoading(false);\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      setLoading(false);\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load Messages\",\n        duration: 5000,\n        status: \"error\",\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async () => {\n    socket.emit(\"stop typing\", selectedChat._id);\n    if (newMessage) {\n      try {\n        const config = {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n\n        setNewMessage(\"\");\n\n        const { data } = await axios.post(\n          \"/api/message\",\n          {\n            content: newMessage,\n            chatId: selectedChat._id,\n          },\n          config\n        );\n\n        socket.emit(\"new message\", data);\n        setMessages([...messages, data]);\n\n        sendNotification(data);\n      } catch (error) {\n        toast({\n          title: \"Error Occured!\",\n          description: \"Failed to send the Message\",\n          duration: 5000,\n          status: \"error\",\n          isClosable: true,\n          position: \"bottom\",\n        });\n      }\n    }\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            pb={3}\n            px={2}\n            w={\"100%\"}\n            fontFamily={\"QuickSand\"}\n            display=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <div style={{ display: \"inherit\" }}>\n              {!selectedChat.isGroupChat ? (\n                <>\n                  <Box mr=\"10px\">\n                    <ProfileModal\n                      user={getOtherUser(user, selectedChat.users)}\n                      size=\"md\"\n                    />\n                  </Box>\n                  {getOtherUser(user, selectedChat.users).name}\n                </>\n              ) : (\n                <>\n                  <Box mr=\"10px\">\n                    <UpdateGroupChatModal\n                      fetchAgain={fetchAgain}\n                      setFetchAgain={setFetchAgain}\n                      fetchMessages={fetchMessages}\n                    />\n                  </Box>\n                  {selectedChat.chatName.toUpperCase()}\n                </>\n              )}\n            </div>\n            <IconButton\n              display={{ base: \"flex\", md: \"none\" }}\n              size=\"sm\"\n              backgroundColor={\"inherit\"}\n              borderRadius=\"100%\"\n              icon={<CloseIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n          </Text>\n\n          <Box\n            display={\"flex\"}\n            flexDir=\"column\"\n            justifyContent={\"flex-end\"}\n            p={3}\n            bg=\"#E8E8E8\"\n            w={\"100%\"}\n            h={\"100%\"}\n            borderRadius=\"lg\"\n            overflowY={\"hidden\"}\n          >\n            {loading ? (\n              <Spinner\n                size={\"xl\"}\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            {isTyping ? (\n              <>\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              </>\n            ) : (\n              <></>\n            )}\n\n            <FormControl isRequired mt={3} display=\"flex\">\n              <Input\n                variant=\"filled\"\n                bg=\"#E0E0E0\"\n                placeholder=\"Enter a message...\"\n                onChange={typingHandler}\n                value={newMessage}\n                backgroundColor=\"#D3D3D3\"\n              />\n              <Button\n                rightIcon={<SendIcon style={{ fill: \"white\" }} />}\n                backgroundColor=\"#187BCD\"\n                ml={1}\n                onClick={sendMessage}\n              />\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        <Box\n          display={\"flex\"}\n          alignItems=\"center\"\n          justifyContent={\"center\"}\n          h=\"100%\"\n        >\n          <Text fontSize={\"3xl\"} pb={3} fontFamily=\"QuickSand\">\n            Click on a User to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\Authentication\\Login.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\Authentication\\Signup.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\miscellaneous\\ProfileModal.js",[],[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\miscellaneous\\UpdateGroupChatModal.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\ScrollableChat.js",["103"],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\UserAvatar\\UserListItem.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\UserAvatar\\UserBadgeItem.js",[],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\miscellaneous\\SideDrawer.js",["104"],[],"import React, { useState } from \"react\";\n<<<<<<< HEAD\nimport { useNavigate } from \"react-router-dom\";\nimport { useToast, Box, Button, Tooltip, Text, Menu, MenuButton, MenuList, MenuItem, MenuDivider, Drawer, DrawerOverlay, DrawerContent, DrawerHeader, DrawerBody, Input, Avatar, Spinner } from \"@chakra-ui/react\";\nimport { Search, Notifications, ExpandMore } from \"@mui/icons-material\";\nimport { ChatState } from \"../../Context/chatProvider\";\nimport ProfileModal from \"./ProfileModal\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport axios from \"axios\";\nimport ChatLoading from \"../ChatLoading\";\nimport UserListItem from \"../UserAvatar/UserListItem\";\nimport { getOtherUser } from \"../../config/ChatLogics\";\nimport NotificationBadge, { Effect } from \"react-notification-badge\";\nimport { API } from \"../../API\";\n\nconst SideDrawer = () => {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState();\n=======\nimport {\n  Box,\n  Button,\n  Tooltip,\n  Typography,\n  Menu,\n  MenuItem,\n  MenuList,\n  Divider,\n  Drawer,\n  DrawerHeader,\n  DrawerBody,\n  Input,\n  Avatar,\n  CircularProgress,\n} from \"@mui/material\";\nimport { makeStyles } from \"@mui/material\";\nimport { Search, Notifications, ExpandMore } from \"@mui/icons-material\";\nimport { ChatState } from \"../../main/chatProvider\";\nimport ProfileModal from \"./ProfileModal\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDisclosure } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport ChatLoading from \"../Chatloading\";\nimport UserListItem from \"../UserAvatar/UserListItem\";\nimport { getOtherUser } from \"../../configuration/ChatLogics\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\n\nconst useStyles = makeStyles((theme) => ({\n  header: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    backgroundColor: \"white\",\n    padding: \"5px 10px\",\n    border: \"5px solid\",\n    borderColor: theme.palette.primary.main,\n  },\n  button: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  buttonText: {\n    display: \"none\",\n    [theme.breakpoints.up(\"md\")]: {\n      display: \"flex\",\n    },\n    paddingLeft: 4,\n  },\n  title: {\n    fontSize: \"3xl\",\n    fontFamily: \"QuickSand\",\n    color: \"black\",\n  },\n  avatarMenu: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  loadingSpinner: {\n    marginLeft: \"auto\",\n    display: \"flex\",\n  },\n}));\n\nconst SideDrawer = () => {\n  const classes = useStyles();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n>>>>>>> b2401a124fe0cbc90c5475fb7dbd256fe5d1e8ab\n\n  const {\n    user,\n    setSelectedChat,\n    chats,\n    setChats,\n    notification,\n    setNotification,\n    removeNotification,\n  } = ChatState();\n\n<<<<<<< HEAD\n  const navigate = useNavigate();\n\n  const LogoutHandler = () => {\n    setNotification([]);\n    localStorage.removeItem(\"userInfo\");\n    setSelectedChat();\n    navigate(\"/\");\n=======\n  const history = useHistory();\n\n  const logoutHandler = () => {\n    setNotification([]);\n    localStorage.removeItem(\"userInfo\");\n    setSelectedChat();\n    history.push(\"/\");\n>>>>>>> b2401a124fe0cbc90c5475fb7dbd256fe5d1e8ab\n  };\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n<<<<<<< HEAD\n  const toast = useToast();\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Search Bar Empty\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n\n=======\n  const handleSearch = async () => {\n    if (!search) {\n      // Display a warning toast if the search bar is empty\n      console.log(\"Search Bar Empty\");\n>>>>>>> b2401a124fe0cbc90c5475fb7dbd256fe5d1e8ab\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n<<<<<<< HEAD\n      const { data } = await axios.get(`${API}/api/user?search=${search}`, config);\n=======\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n>>>>>>> b2401a124fe0cbc90c5475fb7dbd256fe5d1e8ab\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      setLoading(false);\n<<<<<<< HEAD\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n=======\n      console.log(\"Error Occurred!\", error.message);\n>>>>>>> b2401a124fe0cbc90c5475fb7dbd256fe5d1e8ab\n    }\n  };\n\n  const accessChat = async (userId) => {\n    try {\n      setLoadingChat(true);\n\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n<<<<<<< HEAD\n      const { data } = await axios.post(`${API}/api/chat`, { userId }, config);\n=======\n      const { data } = await axios.post(\"/api/chat\", { userId }, config);\n>>>>>>> b2401a124fe0cbc90c5475fb7dbd256fe5d1e8ab\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      setLoadingChat(false);\n<<<<<<< HEAD\n      toast({\n        title: \"Error fetchind the Chat\",\n        description: error.message,\n        status: \"error\",\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n=======\n      console.log(\"Error fetching the Chat\", error.message);\n>>>>>>> b2401a124fe0cbc90c5475fb7dbd256fe5d1e8ab\n    }\n  };\n\n  return (\n    <>\n<<<<<<< HEAD\n      <Box\n        display={\"flex\"}\n        justifyContent=\"space-between\"\n        alignItems={\"center\"}\n        bg=\"white\"\n        w={\"100%\"}\n        p={\"5px 10px 5px 10px\"}\n        borderWidth=\"5px\"\n      >\n        <Tooltip label=\"Search Users to Chat\" hasArrow placement=\"bottom-end\">\n          <Button variant={\"ghost\"} onClick={onOpen}>\n            <Search />\n            <Text display={{ base: \"none\", md: \"flex\" }} px=\"4\">\n              Search User\n            </Text>\n          </Button>\n        </Tooltip>\n\n        <Text fontSize=\"3xl\" fontFamily=\"QuickSand\" color=\"black\">\n          Chit-Chat\n        </Text>\n\n        <div style={{ display: \"flex\", alignContent: \"center\" }}>\n          <Menu>\n            <MenuButton p={2}>\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <Notifications />\n            </MenuButton>\n            <MenuList pl={5} pr={5}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <>\n                  <MenuItem\n                    key={notif._id}\n=======\n      <Box className={classes.header}>\n        <Tooltip\n          title=\"Search Users to Chat\"\n          arrow\n          placement=\"bottom-end\"\n        >\n          <Button className={classes.button} variant=\"text\" onClick={onOpen}>\n            <Search />\n            <Typography className={classes.buttonText} variant=\"body1\">\n              Search User\n            </Typography>\n          </Button>\n        </Tooltip>\n\n        <Typography className={classes.title} variant=\"h4\">\n          Chit-Chat\n        </Typography>\n\n        <div className={classes.avatarMenu}>\n          <Menu>\n            <Button\n              className={classes.button}\n              startIcon={\n                <NotificationBadge\n                  count={notification.length}\n                  effect={Effect.SCALE}\n                />\n              }\n              endIcon={<Notifications />}\n              variant=\"text\"\n            >\n              {/* Notification Menu */}\n            </Button>\n            <MenuList>\n              {!notification.length && (\n                <MenuItem>No New Messages</MenuItem>\n              )}\n              {notification.map((notif) => (\n                <React.Fragment key={notif._id}>\n                  <MenuItem\n>>>>>>> b2401a124fe0cbc90c5475fb7dbd256fe5d1e8ab\n                    onClick={() => {\n                      setSelectedChat(notif.chat);\n                      removeNotification(notif.chat._id);\n                    }}\n<<<<<<< HEAD\n                    display=\"contents\"\n                  >\n                    <Box fontWeight={\"semibold\"}>\n                      {notif.chat.isGroupChat\n                        ? `New Message in ${notif.chat.chatName}`\n                        : `New Message from ${\n                            getOtherUser(user, notif.chat.users).name\n                          }`}\n                    </Box>\n                    <div>{notif.content}</div>\n                  </MenuItem>\n                  <MenuDivider />\n                </>\n=======\n                  >\n                    <Box fontWeight=\"fontWeightMedium\">\n                      {notif.chat.isGroupChat\n                        ? `New Message in ${notif.chat.chatName}`\n                        : `New Message from ${getOtherUser(\n                            user,\n                            notif.chat.users\n                          ).name}`}\n                    </Box>\n                    <div>{notif.content}</div>\n                  </MenuItem>\n                  <Divider />\n                </React.Fragment>\n>>>>>>> b2401a124fe0cbc90c5475fb7dbd256fe5d1e8ab\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n<<<<<<< HEAD\n            <MenuButton\n              p={1}\n              as={Button}\n              rightIcon={<ExpandMore />}\n              backgroundColor=\"inherit\"\n            >\n              <Avatar\n                size=\"sm\"\n                cursor={\"pointer\"}\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user} size=\"sm\">\n                <MenuItem>My Profile</MenuItem>\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={LogoutHandler}>Logout</MenuItem>\n=======\n            <Button\n              className={classes.button}\n              endIcon={<ExpandMore />}\n              variant=\"text\"\n            >\n              <Avatar\n                alt={user.name}\n                src={user.pic}\n              />\n            </Button>\n            <MenuList>\n              <ProfileModal user={user} size=\"small\">\n                <MenuItem>My Profile</MenuItem>\n              </ProfileModal>\n              <Divider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n>>>>>>> b2401a124fe0cbc90c5475fb7dbd256fe5d1e8ab\n            </MenuList>\n          </Menu>\n        </div>\n      </Box>\n\n<<<<<<< HEAD\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerHeader borderBottomWidth={\"1px\"}>Search Users</DrawerHeader>\n          <DrawerBody>\n            <Box display={\"flex\"} pb={2}>\n              <Input\n                placeholder=\"Search by name or email\"\n                mr={2}\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n              />\n              <Button onClick={handleSearch}>Go</Button>\n            </Box>\n            {loading ? (\n              <ChatLoading />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => accessChat(user._id)}\n                />\n              ))\n            )}\n            {loadingChat && <Spinner ml={\"auto\"} display=\"flex\" />}\n          </DrawerBody>\n        </DrawerContent>\n=======\n      <Drawer anchor=\"left\" open={isOpen} onClose={onClose}>\n        <DrawerHeader className={classes.header}>Search Users</DrawerHeader>\n        <DrawerBody>\n          <Box display=\"flex\" paddingBottom={2}>\n            <Input\n              placeholder=\"Search by name or email\"\n              marginRight={2}\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n            />\n            <Button onClick={handleSearch}>Go</Button>\n          </Box>\n          {loading ? (\n            <ChatLoading />\n          ) : (\n            searchResult?.map((user) => (\n              <UserListItem\n                key={user._id}\n                user={user}\n                handleFunction={() => accessChat(user._id)}\n              />\n            ))\n          )}\n          {loadingChat && (\n            <div className={classes.loadingSpinner}>\n              <CircularProgress size={24} />\n            </div>\n          )}\n        </DrawerBody>\n>>>>>>> b2401a124fe0cbc90c5475fb7dbd256fe5d1e8ab\n      </Drawer>\n    </>\n  );\n};\n\nexport default SideDrawer;\n<<<<<<< HEAD\n=======\n\n>>>>>>> b2401a124fe0cbc90c5475fb7dbd256fe5d1e8ab\n","C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\Mychats.js",["105"],[],"C:\\Users\\Dell\\Desktop\\Simple.CHAT-Client--1\\client\\src\\Components\\miscellaneous\\GroupChatModal.js",[],[],{"ruleId":"106","severity":1,"message":"107","line":122,"column":6,"nodeType":"108","endLine":122,"endColumn":12,"suggestions":"109"},{"ruleId":null,"fatal":true,"severity":2,"message":"110","line":1,"column":1,"nodeType":null},{"ruleId":"111","severity":1,"message":"112","line":11,"column":10,"nodeType":"113","messageId":"114","endLine":11,"endColumn":13},{"ruleId":null,"fatal":true,"severity":2,"message":"115","line":2,"column":1,"nodeType":null},{"ruleId":"106","severity":1,"message":"116","line":49,"column":6,"nodeType":"108","endLine":49,"endColumn":18,"suggestions":"117"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getNotifications'. Either include it or remove the dependency array.","ArrayExpression",["118"],"Parsing error: Unexpected token (1:1)","no-unused-vars","'API' is defined but never used.","Identifier","unusedVar","Parsing error: Unexpected token (2:1)","React Hook useEffect has a missing dependency: 'fetchChats'. Either include it or remove the dependency array.",["119"],{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},"Update the dependencies array to be: [getNotifications, user]",{"range":"124","text":"125"},"Update the dependencies array to be: [fetchAgain, fetchChats]",{"range":"126","text":"127"},[2914,2920],"[getNotifications, user]",[1287,1299],"[fetchAgain, fetchChats]"]